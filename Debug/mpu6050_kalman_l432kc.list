
mpu6050_kalman_l432kc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e84  08000190  08000190  00001190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08005018  08005018  00006018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050d0  080050d0  00007100  2**0
                  CONTENTS
  4 .ARM          00000008  080050d0  080050d0  000060d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050d8  080050d8  00007100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050d8  080050d8  000060d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050dc  080050dc  000060dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  080050e0  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000100  080051e0  00007100  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  080051e0  00007390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed6e  00000000  00000000  00007130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000238f  00000000  00000000  00015e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00018230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ba  00000000  00000000  00018ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020979  00000000  00000000  0001988a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011473  00000000  00000000  0003a203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1ee9  00000000  00000000  0004b676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d55f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003748  00000000  00000000  0010d5a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00110cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ffc 	.word	0x08004ffc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	08004ffc 	.word	0x08004ffc

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_uldivmod>:
 8000aa8:	b953      	cbnz	r3, 8000ac0 <__aeabi_uldivmod+0x18>
 8000aaa:	b94a      	cbnz	r2, 8000ac0 <__aeabi_uldivmod+0x18>
 8000aac:	2900      	cmp	r1, #0
 8000aae:	bf08      	it	eq
 8000ab0:	2800      	cmpeq	r0, #0
 8000ab2:	bf1c      	itt	ne
 8000ab4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ab8:	f04f 30ff 	movne.w	r0, #4294967295
 8000abc:	f000 b96a 	b.w	8000d94 <__aeabi_idiv0>
 8000ac0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac8:	f000 f806 	bl	8000ad8 <__udivmoddi4>
 8000acc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad4:	b004      	add	sp, #16
 8000ad6:	4770      	bx	lr

08000ad8 <__udivmoddi4>:
 8000ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000adc:	9d08      	ldr	r5, [sp, #32]
 8000ade:	460c      	mov	r4, r1
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d14e      	bne.n	8000b82 <__udivmoddi4+0xaa>
 8000ae4:	4694      	mov	ip, r2
 8000ae6:	458c      	cmp	ip, r1
 8000ae8:	4686      	mov	lr, r0
 8000aea:	fab2 f282 	clz	r2, r2
 8000aee:	d962      	bls.n	8000bb6 <__udivmoddi4+0xde>
 8000af0:	b14a      	cbz	r2, 8000b06 <__udivmoddi4+0x2e>
 8000af2:	f1c2 0320 	rsb	r3, r2, #32
 8000af6:	4091      	lsls	r1, r2
 8000af8:	fa20 f303 	lsr.w	r3, r0, r3
 8000afc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b00:	4319      	orrs	r1, r3
 8000b02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0a:	fa1f f68c 	uxth.w	r6, ip
 8000b0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b16:	fb07 1114 	mls	r1, r7, r4, r1
 8000b1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b1e:	fb04 f106 	mul.w	r1, r4, r6
 8000b22:	4299      	cmp	r1, r3
 8000b24:	d90a      	bls.n	8000b3c <__udivmoddi4+0x64>
 8000b26:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b2e:	f080 8112 	bcs.w	8000d56 <__udivmoddi4+0x27e>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 810f 	bls.w	8000d56 <__udivmoddi4+0x27e>
 8000b38:	3c02      	subs	r4, #2
 8000b3a:	4463      	add	r3, ip
 8000b3c:	1a59      	subs	r1, r3, r1
 8000b3e:	fa1f f38e 	uxth.w	r3, lr
 8000b42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b46:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4e:	fb00 f606 	mul.w	r6, r0, r6
 8000b52:	429e      	cmp	r6, r3
 8000b54:	d90a      	bls.n	8000b6c <__udivmoddi4+0x94>
 8000b56:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b5e:	f080 80fc 	bcs.w	8000d5a <__udivmoddi4+0x282>
 8000b62:	429e      	cmp	r6, r3
 8000b64:	f240 80f9 	bls.w	8000d5a <__udivmoddi4+0x282>
 8000b68:	4463      	add	r3, ip
 8000b6a:	3802      	subs	r0, #2
 8000b6c:	1b9b      	subs	r3, r3, r6
 8000b6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b72:	2100      	movs	r1, #0
 8000b74:	b11d      	cbz	r5, 8000b7e <__udivmoddi4+0xa6>
 8000b76:	40d3      	lsrs	r3, r2
 8000b78:	2200      	movs	r2, #0
 8000b7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d905      	bls.n	8000b92 <__udivmoddi4+0xba>
 8000b86:	b10d      	cbz	r5, 8000b8c <__udivmoddi4+0xb4>
 8000b88:	e9c5 0100 	strd	r0, r1, [r5]
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4608      	mov	r0, r1
 8000b90:	e7f5      	b.n	8000b7e <__udivmoddi4+0xa6>
 8000b92:	fab3 f183 	clz	r1, r3
 8000b96:	2900      	cmp	r1, #0
 8000b98:	d146      	bne.n	8000c28 <__udivmoddi4+0x150>
 8000b9a:	42a3      	cmp	r3, r4
 8000b9c:	d302      	bcc.n	8000ba4 <__udivmoddi4+0xcc>
 8000b9e:	4290      	cmp	r0, r2
 8000ba0:	f0c0 80f0 	bcc.w	8000d84 <__udivmoddi4+0x2ac>
 8000ba4:	1a86      	subs	r6, r0, r2
 8000ba6:	eb64 0303 	sbc.w	r3, r4, r3
 8000baa:	2001      	movs	r0, #1
 8000bac:	2d00      	cmp	r5, #0
 8000bae:	d0e6      	beq.n	8000b7e <__udivmoddi4+0xa6>
 8000bb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb4:	e7e3      	b.n	8000b7e <__udivmoddi4+0xa6>
 8000bb6:	2a00      	cmp	r2, #0
 8000bb8:	f040 8090 	bne.w	8000cdc <__udivmoddi4+0x204>
 8000bbc:	eba1 040c 	sub.w	r4, r1, ip
 8000bc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc4:	fa1f f78c 	uxth.w	r7, ip
 8000bc8:	2101      	movs	r1, #1
 8000bca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000bd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bda:	fb07 f006 	mul.w	r0, r7, r6
 8000bde:	4298      	cmp	r0, r3
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x11c>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bea:	d202      	bcs.n	8000bf2 <__udivmoddi4+0x11a>
 8000bec:	4298      	cmp	r0, r3
 8000bee:	f200 80cd 	bhi.w	8000d8c <__udivmoddi4+0x2b4>
 8000bf2:	4626      	mov	r6, r4
 8000bf4:	1a1c      	subs	r4, r3, r0
 8000bf6:	fa1f f38e 	uxth.w	r3, lr
 8000bfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000c02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c06:	fb00 f707 	mul.w	r7, r0, r7
 8000c0a:	429f      	cmp	r7, r3
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x148>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x146>
 8000c18:	429f      	cmp	r7, r3
 8000c1a:	f200 80b0 	bhi.w	8000d7e <__udivmoddi4+0x2a6>
 8000c1e:	4620      	mov	r0, r4
 8000c20:	1bdb      	subs	r3, r3, r7
 8000c22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c26:	e7a5      	b.n	8000b74 <__udivmoddi4+0x9c>
 8000c28:	f1c1 0620 	rsb	r6, r1, #32
 8000c2c:	408b      	lsls	r3, r1
 8000c2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c32:	431f      	orrs	r7, r3
 8000c34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c38:	fa04 f301 	lsl.w	r3, r4, r1
 8000c3c:	ea43 030c 	orr.w	r3, r3, ip
 8000c40:	40f4      	lsrs	r4, r6
 8000c42:	fa00 f801 	lsl.w	r8, r0, r1
 8000c46:	0c38      	lsrs	r0, r7, #16
 8000c48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000c50:	fa1f fc87 	uxth.w	ip, r7
 8000c54:	fb00 441e 	mls	r4, r0, lr, r4
 8000c58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000c60:	45a1      	cmp	r9, r4
 8000c62:	fa02 f201 	lsl.w	r2, r2, r1
 8000c66:	d90a      	bls.n	8000c7e <__udivmoddi4+0x1a6>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c6e:	f080 8084 	bcs.w	8000d7a <__udivmoddi4+0x2a2>
 8000c72:	45a1      	cmp	r9, r4
 8000c74:	f240 8081 	bls.w	8000d7a <__udivmoddi4+0x2a2>
 8000c78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c7c:	443c      	add	r4, r7
 8000c7e:	eba4 0409 	sub.w	r4, r4, r9
 8000c82:	fa1f f983 	uxth.w	r9, r3
 8000c86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000c8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c96:	45a4      	cmp	ip, r4
 8000c98:	d907      	bls.n	8000caa <__udivmoddi4+0x1d2>
 8000c9a:	193c      	adds	r4, r7, r4
 8000c9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ca0:	d267      	bcs.n	8000d72 <__udivmoddi4+0x29a>
 8000ca2:	45a4      	cmp	ip, r4
 8000ca4:	d965      	bls.n	8000d72 <__udivmoddi4+0x29a>
 8000ca6:	3b02      	subs	r3, #2
 8000ca8:	443c      	add	r4, r7
 8000caa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cae:	fba0 9302 	umull	r9, r3, r0, r2
 8000cb2:	eba4 040c 	sub.w	r4, r4, ip
 8000cb6:	429c      	cmp	r4, r3
 8000cb8:	46ce      	mov	lr, r9
 8000cba:	469c      	mov	ip, r3
 8000cbc:	d351      	bcc.n	8000d62 <__udivmoddi4+0x28a>
 8000cbe:	d04e      	beq.n	8000d5e <__udivmoddi4+0x286>
 8000cc0:	b155      	cbz	r5, 8000cd8 <__udivmoddi4+0x200>
 8000cc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000cc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000cca:	fa04 f606 	lsl.w	r6, r4, r6
 8000cce:	40cb      	lsrs	r3, r1
 8000cd0:	431e      	orrs	r6, r3
 8000cd2:	40cc      	lsrs	r4, r1
 8000cd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e750      	b.n	8000b7e <__udivmoddi4+0xa6>
 8000cdc:	f1c2 0320 	rsb	r3, r2, #32
 8000ce0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce8:	fa24 f303 	lsr.w	r3, r4, r3
 8000cec:	4094      	lsls	r4, r2
 8000cee:	430c      	orrs	r4, r1
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf8:	fa1f f78c 	uxth.w	r7, ip
 8000cfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d00:	fb08 3110 	mls	r1, r8, r0, r3
 8000d04:	0c23      	lsrs	r3, r4, #16
 8000d06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0a:	fb00 f107 	mul.w	r1, r0, r7
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x24c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d1a:	d22c      	bcs.n	8000d76 <__udivmoddi4+0x29e>
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	d92a      	bls.n	8000d76 <__udivmoddi4+0x29e>
 8000d20:	3802      	subs	r0, #2
 8000d22:	4463      	add	r3, ip
 8000d24:	1a5b      	subs	r3, r3, r1
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000d30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d34:	fb01 f307 	mul.w	r3, r1, r7
 8000d38:	42a3      	cmp	r3, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x276>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d44:	d213      	bcs.n	8000d6e <__udivmoddi4+0x296>
 8000d46:	42a3      	cmp	r3, r4
 8000d48:	d911      	bls.n	8000d6e <__udivmoddi4+0x296>
 8000d4a:	3902      	subs	r1, #2
 8000d4c:	4464      	add	r4, ip
 8000d4e:	1ae4      	subs	r4, r4, r3
 8000d50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d54:	e739      	b.n	8000bca <__udivmoddi4+0xf2>
 8000d56:	4604      	mov	r4, r0
 8000d58:	e6f0      	b.n	8000b3c <__udivmoddi4+0x64>
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e706      	b.n	8000b6c <__udivmoddi4+0x94>
 8000d5e:	45c8      	cmp	r8, r9
 8000d60:	d2ae      	bcs.n	8000cc0 <__udivmoddi4+0x1e8>
 8000d62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d6a:	3801      	subs	r0, #1
 8000d6c:	e7a8      	b.n	8000cc0 <__udivmoddi4+0x1e8>
 8000d6e:	4631      	mov	r1, r6
 8000d70:	e7ed      	b.n	8000d4e <__udivmoddi4+0x276>
 8000d72:	4603      	mov	r3, r0
 8000d74:	e799      	b.n	8000caa <__udivmoddi4+0x1d2>
 8000d76:	4630      	mov	r0, r6
 8000d78:	e7d4      	b.n	8000d24 <__udivmoddi4+0x24c>
 8000d7a:	46d6      	mov	lr, sl
 8000d7c:	e77f      	b.n	8000c7e <__udivmoddi4+0x1a6>
 8000d7e:	4463      	add	r3, ip
 8000d80:	3802      	subs	r0, #2
 8000d82:	e74d      	b.n	8000c20 <__udivmoddi4+0x148>
 8000d84:	4606      	mov	r6, r0
 8000d86:	4623      	mov	r3, r4
 8000d88:	4608      	mov	r0, r1
 8000d8a:	e70f      	b.n	8000bac <__udivmoddi4+0xd4>
 8000d8c:	3e02      	subs	r6, #2
 8000d8e:	4463      	add	r3, ip
 8000d90:	e730      	b.n	8000bf4 <__udivmoddi4+0x11c>
 8000d92:	bf00      	nop

08000d94 <__aeabi_idiv0>:
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	f107 030c 	add.w	r3, r7, #12
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dae:	4b1d      	ldr	r3, [pc, #116]	@ (8000e24 <MX_GPIO_Init+0x8c>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db2:	4a1c      	ldr	r2, [pc, #112]	@ (8000e24 <MX_GPIO_Init+0x8c>)
 8000db4:	f043 0304 	orr.w	r3, r3, #4
 8000db8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dba:	4b1a      	ldr	r3, [pc, #104]	@ (8000e24 <MX_GPIO_Init+0x8c>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dbe:	f003 0304 	and.w	r3, r3, #4
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	4b17      	ldr	r3, [pc, #92]	@ (8000e24 <MX_GPIO_Init+0x8c>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dca:	4a16      	ldr	r2, [pc, #88]	@ (8000e24 <MX_GPIO_Init+0x8c>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dd2:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <MX_GPIO_Init+0x8c>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dde:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <MX_GPIO_Init+0x8c>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de2:	4a10      	ldr	r2, [pc, #64]	@ (8000e24 <MX_GPIO_Init+0x8c>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dea:	4b0e      	ldr	r3, [pc, #56]	@ (8000e24 <MX_GPIO_Init+0x8c>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2108      	movs	r1, #8
 8000dfa:	480b      	ldr	r0, [pc, #44]	@ (8000e28 <MX_GPIO_Init+0x90>)
 8000dfc:	f001 f8e4 	bl	8001fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000e00:	2308      	movs	r3, #8
 8000e02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e04:	2301      	movs	r3, #1
 8000e06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	4619      	mov	r1, r3
 8000e16:	4804      	ldr	r0, [pc, #16]	@ (8000e28 <MX_GPIO_Init+0x90>)
 8000e18:	f000 ff6c 	bl	8001cf4 <HAL_GPIO_Init>

}
 8000e1c:	bf00      	nop
 8000e1e:	3720      	adds	r7, #32
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40021000 	.word	0x40021000
 8000e28:	48000400 	.word	0x48000400

08000e2c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e32:	4a1c      	ldr	r2, [pc, #112]	@ (8000ea4 <MX_I2C1_Init+0x78>)
 8000e34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0060112F;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e38:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea8 <MX_I2C1_Init+0x7c>)
 8000e3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e42:	4b17      	ldr	r3, [pc, #92]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e48:	4b15      	ldr	r3, [pc, #84]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e54:	4b12      	ldr	r3, [pc, #72]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e66:	480e      	ldr	r0, [pc, #56]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e68:	f001 f8c6 	bl	8001ff8 <HAL_I2C_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e72:	f000 f8f5 	bl	8001060 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e76:	2100      	movs	r1, #0
 8000e78:	4809      	ldr	r0, [pc, #36]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e7a:	f001 fe49 	bl	8002b10 <HAL_I2CEx_ConfigAnalogFilter>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e84:	f000 f8ec 	bl	8001060 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4805      	ldr	r0, [pc, #20]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e8c:	f001 fe8b 	bl	8002ba6 <HAL_I2CEx_ConfigDigitalFilter>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e96:	f000 f8e3 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	2000011c 	.word	0x2000011c
 8000ea4:	40005400 	.word	0x40005400
 8000ea8:	0060112f 	.word	0x0060112f

08000eac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b09e      	sub	sp, #120	@ 0x78
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	2254      	movs	r2, #84	@ 0x54
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f003 fcf0 	bl	80048b2 <memset>
  if(i2cHandle->Instance==I2C1)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8000f54 <HAL_I2C_MspInit+0xa8>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d137      	bne.n	8000f4c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000edc:	2340      	movs	r3, #64	@ 0x40
 8000ede:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f002 fd55 	bl	8003998 <HAL_RCCEx_PeriphCLKConfig>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ef4:	f000 f8b4 	bl	8001060 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef8:	4b17      	ldr	r3, [pc, #92]	@ (8000f58 <HAL_I2C_MspInit+0xac>)
 8000efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efc:	4a16      	ldr	r2, [pc, #88]	@ (8000f58 <HAL_I2C_MspInit+0xac>)
 8000efe:	f043 0301 	orr.w	r3, r3, #1
 8000f02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f04:	4b14      	ldr	r3, [pc, #80]	@ (8000f58 <HAL_I2C_MspInit+0xac>)
 8000f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f10:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f14:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f16:	2312      	movs	r3, #18
 8000f18:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f22:	2304      	movs	r3, #4
 8000f24:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f30:	f000 fee0 	bl	8001cf4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f34:	4b08      	ldr	r3, [pc, #32]	@ (8000f58 <HAL_I2C_MspInit+0xac>)
 8000f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f38:	4a07      	ldr	r2, [pc, #28]	@ (8000f58 <HAL_I2C_MspInit+0xac>)
 8000f3a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f40:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <HAL_I2C_MspInit+0xac>)
 8000f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	3778      	adds	r7, #120	@ 0x78
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40005400 	.word	0x40005400
 8000f58:	40021000 	.word	0x40021000

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f60:	f000 fd49 	bl	80019f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f64:	f000 f81a 	bl	8000f9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f68:	f7ff ff16 	bl	8000d98 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f6c:	f000 fc80 	bl	8001870 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f70:	f7ff ff5c 	bl	8000e2c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c1) == 1);
 8000f74:	bf00      	nop
 8000f76:	4807      	ldr	r0, [pc, #28]	@ (8000f94 <main+0x38>)
 8000f78:	f000 f878 	bl	800106c <MPU6050_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <main+0x1a>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8000f82:	4905      	ldr	r1, [pc, #20]	@ (8000f98 <main+0x3c>)
 8000f84:	4803      	ldr	r0, [pc, #12]	@ (8000f94 <main+0x38>)
 8000f86:	f000 f8cb 	bl	8001120 <MPU6050_Read_All>
	  HAL_Delay (100);
 8000f8a:	2064      	movs	r0, #100	@ 0x64
 8000f8c:	f000 fda8 	bl	8001ae0 <HAL_Delay>
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8000f90:	bf00      	nop
 8000f92:	e7f6      	b.n	8000f82 <main+0x26>
 8000f94:	2000011c 	.word	0x2000011c
 8000f98:	20000170 	.word	0x20000170

08000f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b096      	sub	sp, #88	@ 0x58
 8000fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	2244      	movs	r2, #68	@ 0x44
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f003 fc81 	bl	80048b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
 8000fbc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fbe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fc2:	f001 fe5b 	bl	8002c7c <HAL_PWREx_ControlVoltageScaling>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fcc:	f000 f848 	bl	8001060 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000fd0:	f001 fe36 	bl	8002c40 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000fd4:	4b21      	ldr	r3, [pc, #132]	@ (800105c <SystemClock_Config+0xc0>)
 8000fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000fda:	4a20      	ldr	r2, [pc, #128]	@ (800105c <SystemClock_Config+0xc0>)
 8000fdc:	f023 0318 	bic.w	r3, r3, #24
 8000fe0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000fe4:	2314      	movs	r3, #20
 8000fe6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fec:	2301      	movs	r3, #1
 8000fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ff4:	2360      	movs	r3, #96	@ 0x60
 8000ff6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001000:	2301      	movs	r3, #1
 8001002:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001004:	2310      	movs	r3, #16
 8001006:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001008:	2307      	movs	r3, #7
 800100a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800100c:	2302      	movs	r3, #2
 800100e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001010:	2302      	movs	r3, #2
 8001012:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4618      	mov	r0, r3
 800101a:	f001 fe85 	bl	8002d28 <HAL_RCC_OscConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001024:	f000 f81c 	bl	8001060 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001028:	230f      	movs	r3, #15
 800102a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102c:	2303      	movs	r3, #3
 800102e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800103c:	463b      	mov	r3, r7
 800103e:	2101      	movs	r1, #1
 8001040:	4618      	mov	r0, r3
 8001042:	f002 fa85 	bl	8003550 <HAL_RCC_ClockConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800104c:	f000 f808 	bl	8001060 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001050:	f002 fe98 	bl	8003d84 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001054:	bf00      	nop
 8001056:	3758      	adds	r7, #88	@ 0x58
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40021000 	.word	0x40021000

08001060 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001064:	b672      	cpsid	i
}
 8001066:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <Error_Handler+0x8>

0800106c <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af04      	add	r7, sp, #16
 8001072:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001074:	2364      	movs	r3, #100	@ 0x64
 8001076:	9302      	str	r3, [sp, #8]
 8001078:	2301      	movs	r3, #1
 800107a:	9301      	str	r3, [sp, #4]
 800107c:	f107 030f 	add.w	r3, r7, #15
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2301      	movs	r3, #1
 8001084:	2275      	movs	r2, #117	@ 0x75
 8001086:	21d0      	movs	r1, #208	@ 0xd0
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f001 f965 	bl	8002358 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	2b68      	cmp	r3, #104	@ 0x68
 8001092:	d13d      	bne.n	8001110 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001098:	2364      	movs	r3, #100	@ 0x64
 800109a:	9302      	str	r3, [sp, #8]
 800109c:	2301      	movs	r3, #1
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	f107 030e 	add.w	r3, r7, #14
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2301      	movs	r3, #1
 80010a8:	226b      	movs	r2, #107	@ 0x6b
 80010aa:	21d0      	movs	r1, #208	@ 0xd0
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f001 f83f 	bl	8002130 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80010b2:	2307      	movs	r3, #7
 80010b4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80010b6:	2364      	movs	r3, #100	@ 0x64
 80010b8:	9302      	str	r3, [sp, #8]
 80010ba:	2301      	movs	r3, #1
 80010bc:	9301      	str	r3, [sp, #4]
 80010be:	f107 030e 	add.w	r3, r7, #14
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2301      	movs	r3, #1
 80010c6:	2219      	movs	r2, #25
 80010c8:	21d0      	movs	r1, #208	@ 0xd0
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f001 f830 	bl	8002130 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80010d0:	2300      	movs	r3, #0
 80010d2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80010d4:	2364      	movs	r3, #100	@ 0x64
 80010d6:	9302      	str	r3, [sp, #8]
 80010d8:	2301      	movs	r3, #1
 80010da:	9301      	str	r3, [sp, #4]
 80010dc:	f107 030e 	add.w	r3, r7, #14
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2301      	movs	r3, #1
 80010e4:	221c      	movs	r2, #28
 80010e6:	21d0      	movs	r1, #208	@ 0xd0
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f001 f821 	bl	8002130 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80010ee:	2300      	movs	r3, #0
 80010f0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80010f2:	2364      	movs	r3, #100	@ 0x64
 80010f4:	9302      	str	r3, [sp, #8]
 80010f6:	2301      	movs	r3, #1
 80010f8:	9301      	str	r3, [sp, #4]
 80010fa:	f107 030e 	add.w	r3, r7, #14
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2301      	movs	r3, #1
 8001102:	221b      	movs	r2, #27
 8001104:	21d0      	movs	r1, #208	@ 0xd0
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f001 f812 	bl	8002130 <HAL_I2C_Mem_Write>
        return 0;
 800110c:	2300      	movs	r3, #0
 800110e:	e000      	b.n	8001112 <MPU6050_Init+0xa6>
    }
    return 1;
 8001110:	2301      	movs	r3, #1
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	0000      	movs	r0, r0
 800111c:	0000      	movs	r0, r0
	...

08001120 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001124:	b094      	sub	sp, #80	@ 0x50
 8001126:	af04      	add	r7, sp, #16
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800112c:	2364      	movs	r3, #100	@ 0x64
 800112e:	9302      	str	r3, [sp, #8]
 8001130:	230e      	movs	r3, #14
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	f107 0308 	add.w	r3, r7, #8
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	223b      	movs	r2, #59	@ 0x3b
 800113e:	21d0      	movs	r1, #208	@ 0xd0
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f001 f909 	bl	8002358 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001146:	7a3b      	ldrb	r3, [r7, #8]
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	b21a      	sxth	r2, r3
 800114c:	7a7b      	ldrb	r3, [r7, #9]
 800114e:	b21b      	sxth	r3, r3
 8001150:	4313      	orrs	r3, r2
 8001152:	b21a      	sxth	r2, r3
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001158:	7abb      	ldrb	r3, [r7, #10]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	b21a      	sxth	r2, r3
 800115e:	7afb      	ldrb	r3, [r7, #11]
 8001160:	b21b      	sxth	r3, r3
 8001162:	4313      	orrs	r3, r2
 8001164:	b21a      	sxth	r2, r3
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800116a:	7b3b      	ldrb	r3, [r7, #12]
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	b21a      	sxth	r2, r3
 8001170:	7b7b      	ldrb	r3, [r7, #13]
 8001172:	b21b      	sxth	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b21a      	sxth	r2, r3
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 800117c:	7bbb      	ldrb	r3, [r7, #14]
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	b21a      	sxth	r2, r3
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	b21b      	sxth	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 800118a:	7c3b      	ldrb	r3, [r7, #16]
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	b21a      	sxth	r2, r3
 8001190:	7c7b      	ldrb	r3, [r7, #17]
 8001192:	b21b      	sxth	r3, r3
 8001194:	4313      	orrs	r3, r2
 8001196:	b21a      	sxth	r2, r3
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 800119c:	7cbb      	ldrb	r3, [r7, #18]
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	7cfb      	ldrb	r3, [r7, #19]
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 80011ae:	7d3b      	ldrb	r3, [r7, #20]
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	b21a      	sxth	r2, r3
 80011b4:	7d7b      	ldrb	r3, [r7, #21]
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f954 	bl	8000474 <__aeabi_i2d>
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	4bbd      	ldr	r3, [pc, #756]	@ (80014c8 <MPU6050_Read_All+0x3a8>)
 80011d2:	f7ff fae3 	bl	800079c <__aeabi_ddiv>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	6839      	ldr	r1, [r7, #0]
 80011dc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f944 	bl	8000474 <__aeabi_i2d>
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	4bb5      	ldr	r3, [pc, #724]	@ (80014c8 <MPU6050_Read_All+0x3a8>)
 80011f2:	f7ff fad3 	bl	800079c <__aeabi_ddiv>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	6839      	ldr	r1, [r7, #0]
 80011fc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f934 	bl	8000474 <__aeabi_i2d>
 800120c:	a3a8      	add	r3, pc, #672	@ (adr r3, 80014b0 <MPU6050_Read_All+0x390>)
 800120e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001212:	f7ff fac3 	bl	800079c <__aeabi_ddiv>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	6839      	ldr	r1, [r7, #0]
 800121c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8001220:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001224:	ee07 3a90 	vmov	s15, r3
 8001228:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800122c:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 80014cc <MPU6050_Read_All+0x3ac>
 8001230:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001234:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 80014d0 <MPU6050_Read_All+0x3b0>
 8001238:	ee77 7a87 	vadd.f32	s15, s15, s14
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f913 	bl	8000474 <__aeabi_i2d>
 800124e:	a39a      	add	r3, pc, #616	@ (adr r3, 80014b8 <MPU6050_Read_All+0x398>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f7ff faa2 	bl	800079c <__aeabi_ddiv>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	6839      	ldr	r1, [r7, #0]
 800125e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f903 	bl	8000474 <__aeabi_i2d>
 800126e:	a392      	add	r3, pc, #584	@ (adr r3, 80014b8 <MPU6050_Read_All+0x398>)
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	f7ff fa92 	bl	800079c <__aeabi_ddiv>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	6839      	ldr	r1, [r7, #0]
 800127e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f8f3 	bl	8000474 <__aeabi_i2d>
 800128e:	a38a      	add	r3, pc, #552	@ (adr r3, 80014b8 <MPU6050_Read_All+0x398>)
 8001290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001294:	f7ff fa82 	bl	800079c <__aeabi_ddiv>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	6839      	ldr	r1, [r7, #0]
 800129e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 80012a2:	f000 fc11 	bl	8001ac8 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	4b8a      	ldr	r3, [pc, #552]	@ (80014d4 <MPU6050_Read_All+0x3b4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff f8d0 	bl	8000454 <__aeabi_ui2d>
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	4b87      	ldr	r3, [pc, #540]	@ (80014d8 <MPU6050_Read_All+0x3b8>)
 80012ba:	f7ff fa6f 	bl	800079c <__aeabi_ddiv>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 80012c6:	f000 fbff 	bl	8001ac8 <HAL_GetTick>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4a81      	ldr	r2, [pc, #516]	@ (80014d4 <MPU6050_Read_All+0x3b4>)
 80012ce:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d6:	461a      	mov	r2, r3
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012de:	fb03 f202 	mul.w	r2, r3, r2
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012e8:	4619      	mov	r1, r3
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012f0:	fb01 f303 	mul.w	r3, r1, r3
 80012f4:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f8bc 	bl	8000474 <__aeabi_i2d>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	ec43 2b10 	vmov	d0, r2, r3
 8001304:	f003 fb0a 	bl	800491c <sqrt>
 8001308:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	f04f 0300 	mov.w	r3, #0
 8001314:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001318:	f7ff fb7e 	bl	8000a18 <__aeabi_dcmpeq>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d11f      	bne.n	8001362 <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f8a3 	bl	8000474 <__aeabi_i2d>
 800132e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001332:	f7ff fa33 	bl	800079c <__aeabi_ddiv>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	ec43 2b17 	vmov	d7, r2, r3
 800133e:	eeb0 0a47 	vmov.f32	s0, s14
 8001342:	eef0 0a67 	vmov.f32	s1, s15
 8001346:	f003 fb17 	bl	8004978 <atan>
 800134a:	ec51 0b10 	vmov	r0, r1, d0
 800134e:	a35c      	add	r3, pc, #368	@ (adr r3, 80014c0 <MPU6050_Read_All+0x3a0>)
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	f7ff f8f8 	bl	8000548 <__aeabi_dmul>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8001360:	e005      	b.n	800136e <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001374:	425b      	negs	r3, r3
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f87c 	bl	8000474 <__aeabi_i2d>
 800137c:	4682      	mov	sl, r0
 800137e:	468b      	mov	fp, r1
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f874 	bl	8000474 <__aeabi_i2d>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	ec43 2b11 	vmov	d1, r2, r3
 8001394:	ec4b ab10 	vmov	d0, sl, fp
 8001398:	f003 fabe 	bl	8004918 <atan2>
 800139c:	ec51 0b10 	vmov	r0, r1, d0
 80013a0:	a347      	add	r3, pc, #284	@ (adr r3, 80014c0 <MPU6050_Read_All+0x3a0>)
 80013a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a6:	f7ff f8cf 	bl	8000548 <__aeabi_dmul>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	4b49      	ldr	r3, [pc, #292]	@ (80014dc <MPU6050_Read_All+0x3bc>)
 80013b8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013bc:	f7ff fb36 	bl	8000a2c <__aeabi_dcmplt>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00a      	beq.n	80013dc <MPU6050_Read_All+0x2bc>
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	4b43      	ldr	r3, [pc, #268]	@ (80014e0 <MPU6050_Read_All+0x3c0>)
 80013d2:	f7ff fb49 	bl	8000a68 <__aeabi_dcmpgt>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d114      	bne.n	8001406 <MPU6050_Read_All+0x2e6>
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	4b3f      	ldr	r3, [pc, #252]	@ (80014e0 <MPU6050_Read_All+0x3c0>)
 80013e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013e6:	f7ff fb3f 	bl	8000a68 <__aeabi_dcmpgt>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d015      	beq.n	800141c <MPU6050_Read_All+0x2fc>
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	4b38      	ldr	r3, [pc, #224]	@ (80014dc <MPU6050_Read_All+0x3bc>)
 80013fc:	f7ff fb16 	bl	8000a2c <__aeabi_dcmplt>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00a      	beq.n	800141c <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 8001406:	4937      	ldr	r1, [pc, #220]	@ (80014e4 <MPU6050_Read_All+0x3c4>)
 8001408:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800140c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001410:	6839      	ldr	r1, [r7, #0]
 8001412:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001416:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 800141a:	e014      	b.n	8001446 <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8001422:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8001426:	eeb0 1a47 	vmov.f32	s2, s14
 800142a:	eef0 1a67 	vmov.f32	s3, s15
 800142e:	ed97 0b06 	vldr	d0, [r7, #24]
 8001432:	482c      	ldr	r0, [pc, #176]	@ (80014e4 <MPU6050_Read_All+0x3c4>)
 8001434:	f000 f85a 	bl	80014ec <Kalman_getAngle>
 8001438:	eeb0 7a40 	vmov.f32	s14, s0
 800143c:	eef0 7a60 	vmov.f32	s15, s1
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800144c:	4690      	mov	r8, r2
 800144e:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	4b22      	ldr	r3, [pc, #136]	@ (80014e0 <MPU6050_Read_All+0x3c0>)
 8001458:	4640      	mov	r0, r8
 800145a:	4649      	mov	r1, r9
 800145c:	f7ff fb04 	bl	8000a68 <__aeabi_dcmpgt>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d008      	beq.n	8001478 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800146c:	4614      	mov	r4, r2
 800146e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 800147e:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8001482:	eeb0 1a47 	vmov.f32	s2, s14
 8001486:	eef0 1a67 	vmov.f32	s3, s15
 800148a:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 800148e:	4816      	ldr	r0, [pc, #88]	@ (80014e8 <MPU6050_Read_All+0x3c8>)
 8001490:	f000 f82c 	bl	80014ec <Kalman_getAngle>
 8001494:	eeb0 7a40 	vmov.f32	s14, s0
 8001498:	eef0 7a60 	vmov.f32	s15, s1
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48

}
 80014a2:	bf00      	nop
 80014a4:	3740      	adds	r7, #64	@ 0x40
 80014a6:	46bd      	mov	sp, r7
 80014a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014ac:	f3af 8000 	nop.w
 80014b0:	00000000 	.word	0x00000000
 80014b4:	40cc2900 	.word	0x40cc2900
 80014b8:	00000000 	.word	0x00000000
 80014bc:	40606000 	.word	0x40606000
 80014c0:	1a63c1f8 	.word	0x1a63c1f8
 80014c4:	404ca5dc 	.word	0x404ca5dc
 80014c8:	40d00000 	.word	0x40d00000
 80014cc:	43aa0000 	.word	0x43aa0000
 80014d0:	42121eb8 	.word	0x42121eb8
 80014d4:	200001c8 	.word	0x200001c8
 80014d8:	408f4000 	.word	0x408f4000
 80014dc:	c0568000 	.word	0xc0568000
 80014e0:	40568000 	.word	0x40568000
 80014e4:	20000048 	.word	0x20000048
 80014e8:	20000000 	.word	0x20000000

080014ec <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 80014ec:	b5b0      	push	{r4, r5, r7, lr}
 80014ee:	b096      	sub	sp, #88	@ 0x58
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	61f8      	str	r0, [r7, #28]
 80014f4:	ed87 0b04 	vstr	d0, [r7, #16]
 80014f8:	ed87 1b02 	vstr	d1, [r7, #8]
 80014fc:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001506:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800150a:	f7fe fe65 	bl	80001d8 <__aeabi_dsub>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800151c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001520:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001524:	f7ff f810 	bl	8000548 <__aeabi_dmul>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4620      	mov	r0, r4
 800152e:	4629      	mov	r1, r5
 8001530:	f7fe fe54 	bl	80001dc <__adddf3>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	69f9      	ldr	r1, [r7, #28]
 800153a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800154a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800154e:	f7fe fffb 	bl	8000548 <__aeabi_dmul>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001560:	f7fe fe3a 	bl	80001d8 <__aeabi_dsub>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4610      	mov	r0, r2
 800156a:	4619      	mov	r1, r3
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001572:	f7fe fe31 	bl	80001d8 <__aeabi_dsub>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7fe fe2a 	bl	80001dc <__adddf3>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001594:	f7fe ffd8 	bl	8000548 <__aeabi_dmul>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4620      	mov	r0, r4
 800159e:	4629      	mov	r1, r5
 80015a0:	f7fe fe1c 	bl	80001dc <__adddf3>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	69f9      	ldr	r1, [r7, #28]
 80015aa:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80015ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015be:	f7fe ffc3 	bl	8000548 <__aeabi_dmul>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4620      	mov	r0, r4
 80015c8:	4629      	mov	r1, r5
 80015ca:	f7fe fe05 	bl	80001d8 <__aeabi_dsub>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	69f9      	ldr	r1, [r7, #28]
 80015d4:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80015e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015e8:	f7fe ffae 	bl	8000548 <__aeabi_dmul>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4620      	mov	r0, r4
 80015f2:	4629      	mov	r1, r5
 80015f4:	f7fe fdf0 	bl	80001d8 <__aeabi_dsub>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	69f9      	ldr	r1, [r7, #28]
 80015fe:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800160e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001612:	f7fe ff99 	bl	8000548 <__aeabi_dmul>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4620      	mov	r0, r4
 800161c:	4629      	mov	r1, r5
 800161e:	f7fe fddd 	bl	80001dc <__adddf3>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	69f9      	ldr	r1, [r7, #28]
 8001628:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001638:	f7fe fdd0 	bl	80001dc <__adddf3>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800164a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800164e:	f7ff f8a5 	bl	800079c <__aeabi_ddiv>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001660:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001664:	f7ff f89a 	bl	800079c <__aeabi_ddiv>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001676:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800167a:	f7fe fdad 	bl	80001d8 <__aeabi_dsub>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800168c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001690:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001694:	f7fe ff58 	bl	8000548 <__aeabi_dmul>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4620      	mov	r0, r4
 800169e:	4629      	mov	r1, r5
 80016a0:	f7fe fd9c 	bl	80001dc <__adddf3>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	69f9      	ldr	r1, [r7, #28]
 80016aa:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80016b4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80016b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80016bc:	f7fe ff44 	bl	8000548 <__aeabi_dmul>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4620      	mov	r0, r4
 80016c6:	4629      	mov	r1, r5
 80016c8:	f7fe fd88 	bl	80001dc <__adddf3>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	69f9      	ldr	r1, [r7, #28]
 80016d2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80016dc:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80016e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80016f0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80016f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80016f8:	f7fe ff26 	bl	8000548 <__aeabi_dmul>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4620      	mov	r0, r4
 8001702:	4629      	mov	r1, r5
 8001704:	f7fe fd68 	bl	80001d8 <__aeabi_dsub>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	69f9      	ldr	r1, [r7, #28]
 800170e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001718:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800171c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001720:	f7fe ff12 	bl	8000548 <__aeabi_dmul>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4620      	mov	r0, r4
 800172a:	4629      	mov	r1, r5
 800172c:	f7fe fd54 	bl	80001d8 <__aeabi_dsub>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	69f9      	ldr	r1, [r7, #28]
 8001736:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001740:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001744:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001748:	f7fe fefe 	bl	8000548 <__aeabi_dmul>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4620      	mov	r0, r4
 8001752:	4629      	mov	r1, r5
 8001754:	f7fe fd40 	bl	80001d8 <__aeabi_dsub>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	69f9      	ldr	r1, [r7, #28]
 800175e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001768:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800176c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001770:	f7fe feea 	bl	8000548 <__aeabi_dmul>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4620      	mov	r0, r4
 800177a:	4629      	mov	r1, r5
 800177c:	f7fe fd2c 	bl	80001d8 <__aeabi_dsub>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	69f9      	ldr	r1, [r7, #28]
 8001786:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001790:	ec43 2b17 	vmov	d7, r2, r3
};
 8001794:	eeb0 0a47 	vmov.f32	s0, s14
 8001798:	eef0 0a67 	vmov.f32	s1, s15
 800179c:	3758      	adds	r7, #88	@ 0x58
 800179e:	46bd      	mov	sp, r7
 80017a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080017a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	4b0f      	ldr	r3, [pc, #60]	@ (80017e8 <HAL_MspInit+0x44>)
 80017ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ae:	4a0e      	ldr	r2, [pc, #56]	@ (80017e8 <HAL_MspInit+0x44>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80017b6:	4b0c      	ldr	r3, [pc, #48]	@ (80017e8 <HAL_MspInit+0x44>)
 80017b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c2:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <HAL_MspInit+0x44>)
 80017c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c6:	4a08      	ldr	r2, [pc, #32]	@ (80017e8 <HAL_MspInit+0x44>)
 80017c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80017ce:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <HAL_MspInit+0x44>)
 80017d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000

080017ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <NMI_Handler+0x4>

080017f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <HardFault_Handler+0x4>

080017fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <MemManage_Handler+0x4>

08001804 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <BusFault_Handler+0x4>

0800180c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <UsageFault_Handler+0x4>

08001814 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001842:	f000 f92d 	bl	8001aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001850:	4b06      	ldr	r3, [pc, #24]	@ (800186c <SystemInit+0x20>)
 8001852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001856:	4a05      	ldr	r2, [pc, #20]	@ (800186c <SystemInit+0x20>)
 8001858:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800185c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001874:	4b14      	ldr	r3, [pc, #80]	@ (80018c8 <MX_USART2_UART_Init+0x58>)
 8001876:	4a15      	ldr	r2, [pc, #84]	@ (80018cc <MX_USART2_UART_Init+0x5c>)
 8001878:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800187a:	4b13      	ldr	r3, [pc, #76]	@ (80018c8 <MX_USART2_UART_Init+0x58>)
 800187c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001880:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001882:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <MX_USART2_UART_Init+0x58>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001888:	4b0f      	ldr	r3, [pc, #60]	@ (80018c8 <MX_USART2_UART_Init+0x58>)
 800188a:	2200      	movs	r2, #0
 800188c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800188e:	4b0e      	ldr	r3, [pc, #56]	@ (80018c8 <MX_USART2_UART_Init+0x58>)
 8001890:	2200      	movs	r2, #0
 8001892:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001894:	4b0c      	ldr	r3, [pc, #48]	@ (80018c8 <MX_USART2_UART_Init+0x58>)
 8001896:	220c      	movs	r2, #12
 8001898:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800189a:	4b0b      	ldr	r3, [pc, #44]	@ (80018c8 <MX_USART2_UART_Init+0x58>)
 800189c:	2200      	movs	r2, #0
 800189e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a0:	4b09      	ldr	r3, [pc, #36]	@ (80018c8 <MX_USART2_UART_Init+0x58>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018a6:	4b08      	ldr	r3, [pc, #32]	@ (80018c8 <MX_USART2_UART_Init+0x58>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ac:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <MX_USART2_UART_Init+0x58>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018b2:	4805      	ldr	r0, [pc, #20]	@ (80018c8 <MX_USART2_UART_Init+0x58>)
 80018b4:	f002 fb68 	bl	8003f88 <HAL_UART_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018be:	f7ff fbcf 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200001cc 	.word	0x200001cc
 80018cc:	40004400 	.word	0x40004400

080018d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b09e      	sub	sp, #120	@ 0x78
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e8:	f107 0310 	add.w	r3, r7, #16
 80018ec:	2254      	movs	r2, #84	@ 0x54
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f002 ffde 	bl	80048b2 <memset>
  if(uartHandle->Instance==USART2)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a28      	ldr	r2, [pc, #160]	@ (800199c <HAL_UART_MspInit+0xcc>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d148      	bne.n	8001992 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001900:	2302      	movs	r3, #2
 8001902:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001904:	2300      	movs	r3, #0
 8001906:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001908:	f107 0310 	add.w	r3, r7, #16
 800190c:	4618      	mov	r0, r3
 800190e:	f002 f843 	bl	8003998 <HAL_RCCEx_PeriphCLKConfig>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001918:	f7ff fba2 	bl	8001060 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800191c:	4b20      	ldr	r3, [pc, #128]	@ (80019a0 <HAL_UART_MspInit+0xd0>)
 800191e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001920:	4a1f      	ldr	r2, [pc, #124]	@ (80019a0 <HAL_UART_MspInit+0xd0>)
 8001922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001926:	6593      	str	r3, [r2, #88]	@ 0x58
 8001928:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <HAL_UART_MspInit+0xd0>)
 800192a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001934:	4b1a      	ldr	r3, [pc, #104]	@ (80019a0 <HAL_UART_MspInit+0xd0>)
 8001936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001938:	4a19      	ldr	r2, [pc, #100]	@ (80019a0 <HAL_UART_MspInit+0xd0>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001940:	4b17      	ldr	r3, [pc, #92]	@ (80019a0 <HAL_UART_MspInit+0xd0>)
 8001942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800194c:	2304      	movs	r3, #4
 800194e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800195c:	2307      	movs	r3, #7
 800195e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001960:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001964:	4619      	mov	r1, r3
 8001966:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800196a:	f000 f9c3 	bl	8001cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800196e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001972:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197c:	2303      	movs	r3, #3
 800197e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001980:	2303      	movs	r3, #3
 8001982:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001984:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001988:	4619      	mov	r1, r3
 800198a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800198e:	f000 f9b1 	bl	8001cf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001992:	bf00      	nop
 8001994:	3778      	adds	r7, #120	@ 0x78
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40004400 	.word	0x40004400
 80019a0:	40021000 	.word	0x40021000

080019a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019a8:	f7ff ff50 	bl	800184c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019ac:	480c      	ldr	r0, [pc, #48]	@ (80019e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80019ae:	490d      	ldr	r1, [pc, #52]	@ (80019e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019b0:	4a0d      	ldr	r2, [pc, #52]	@ (80019e8 <LoopForever+0xe>)
  movs r3, #0
 80019b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b4:	e002      	b.n	80019bc <LoopCopyDataInit>

080019b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ba:	3304      	adds	r3, #4

080019bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c0:	d3f9      	bcc.n	80019b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c2:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80019c4:	4c0a      	ldr	r4, [pc, #40]	@ (80019f0 <LoopForever+0x16>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c8:	e001      	b.n	80019ce <LoopFillZerobss>

080019ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019cc:	3204      	adds	r2, #4

080019ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d0:	d3fb      	bcc.n	80019ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019d2:	f002 ff7d 	bl	80048d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019d6:	f7ff fac1 	bl	8000f5c <main>

080019da <LoopForever>:

LoopForever:
    b LoopForever
 80019da:	e7fe      	b.n	80019da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019dc:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80019e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e4:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80019e8:	080050e0 	.word	0x080050e0
  ldr r2, =_sbss
 80019ec:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80019f0:	20000390 	.word	0x20000390

080019f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019f4:	e7fe      	b.n	80019f4 <ADC1_IRQHandler>

080019f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a00:	2003      	movs	r0, #3
 8001a02:	f000 f943 	bl	8001c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a06:	2000      	movs	r0, #0
 8001a08:	f000 f80e 	bl	8001a28 <HAL_InitTick>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d002      	beq.n	8001a18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	71fb      	strb	r3, [r7, #7]
 8001a16:	e001      	b.n	8001a1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a18:	f7ff fec4 	bl	80017a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a30:	2300      	movs	r3, #0
 8001a32:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a34:	4b17      	ldr	r3, [pc, #92]	@ (8001a94 <HAL_InitTick+0x6c>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d023      	beq.n	8001a84 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a3c:	4b16      	ldr	r3, [pc, #88]	@ (8001a98 <HAL_InitTick+0x70>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4b14      	ldr	r3, [pc, #80]	@ (8001a94 <HAL_InitTick+0x6c>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	4619      	mov	r1, r3
 8001a46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 f941 	bl	8001cda <HAL_SYSTICK_Config>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10f      	bne.n	8001a7e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b0f      	cmp	r3, #15
 8001a62:	d809      	bhi.n	8001a78 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a64:	2200      	movs	r2, #0
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6c:	f000 f919 	bl	8001ca2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a70:	4a0a      	ldr	r2, [pc, #40]	@ (8001a9c <HAL_InitTick+0x74>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	e007      	b.n	8001a88 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	73fb      	strb	r3, [r7, #15]
 8001a7c:	e004      	b.n	8001a88 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	73fb      	strb	r3, [r7, #15]
 8001a82:	e001      	b.n	8001a88 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000098 	.word	0x20000098
 8001a98:	20000090 	.word	0x20000090
 8001a9c:	20000094 	.word	0x20000094

08001aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_IncTick+0x20>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <HAL_IncTick+0x24>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	4a04      	ldr	r2, [pc, #16]	@ (8001ac4 <HAL_IncTick+0x24>)
 8001ab2:	6013      	str	r3, [r2, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000098 	.word	0x20000098
 8001ac4:	20000254 	.word	0x20000254

08001ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return uwTick;
 8001acc:	4b03      	ldr	r3, [pc, #12]	@ (8001adc <HAL_GetTick+0x14>)
 8001ace:	681b      	ldr	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20000254 	.word	0x20000254

08001ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae8:	f7ff ffee 	bl	8001ac8 <HAL_GetTick>
 8001aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af8:	d005      	beq.n	8001b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001afa:	4b0a      	ldr	r3, [pc, #40]	@ (8001b24 <HAL_Delay+0x44>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b06:	bf00      	nop
 8001b08:	f7ff ffde 	bl	8001ac8 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d8f7      	bhi.n	8001b08 <HAL_Delay+0x28>
  {
  }
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000098 	.word	0x20000098

08001b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b38:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b44:	4013      	ands	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5a:	4a04      	ldr	r2, [pc, #16]	@ (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	60d3      	str	r3, [r2, #12]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b74:	4b04      	ldr	r3, [pc, #16]	@ (8001b88 <__NVIC_GetPriorityGrouping+0x18>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	f003 0307 	and.w	r3, r3, #7
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	6039      	str	r1, [r7, #0]
 8001b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	db0a      	blt.n	8001bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	490c      	ldr	r1, [pc, #48]	@ (8001bd8 <__NVIC_SetPriority+0x4c>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	0112      	lsls	r2, r2, #4
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	440b      	add	r3, r1
 8001bb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb4:	e00a      	b.n	8001bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4908      	ldr	r1, [pc, #32]	@ (8001bdc <__NVIC_SetPriority+0x50>)
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	3b04      	subs	r3, #4
 8001bc4:	0112      	lsls	r2, r2, #4
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	440b      	add	r3, r1
 8001bca:	761a      	strb	r2, [r3, #24]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000e100 	.word	0xe000e100
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b089      	sub	sp, #36	@ 0x24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f1c3 0307 	rsb	r3, r3, #7
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	bf28      	it	cs
 8001bfe:	2304      	movcs	r3, #4
 8001c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3304      	adds	r3, #4
 8001c06:	2b06      	cmp	r3, #6
 8001c08:	d902      	bls.n	8001c10 <NVIC_EncodePriority+0x30>
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3b03      	subs	r3, #3
 8001c0e:	e000      	b.n	8001c12 <NVIC_EncodePriority+0x32>
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	f04f 32ff 	mov.w	r2, #4294967295
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	401a      	ands	r2, r3
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c28:	f04f 31ff 	mov.w	r1, #4294967295
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c32:	43d9      	mvns	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	4313      	orrs	r3, r2
         );
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3724      	adds	r7, #36	@ 0x24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c58:	d301      	bcc.n	8001c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00f      	b.n	8001c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c88 <SysTick_Config+0x40>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c66:	210f      	movs	r1, #15
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	f7ff ff8e 	bl	8001b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c70:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <SysTick_Config+0x40>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c76:	4b04      	ldr	r3, [pc, #16]	@ (8001c88 <SysTick_Config+0x40>)
 8001c78:	2207      	movs	r2, #7
 8001c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	e000e010 	.word	0xe000e010

08001c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ff47 	bl	8001b28 <__NVIC_SetPriorityGrouping>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
 8001cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb4:	f7ff ff5c 	bl	8001b70 <__NVIC_GetPriorityGrouping>
 8001cb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	6978      	ldr	r0, [r7, #20]
 8001cc0:	f7ff ff8e 	bl	8001be0 <NVIC_EncodePriority>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff5d 	bl	8001b8c <__NVIC_SetPriority>
}
 8001cd2:	bf00      	nop
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff ffb0 	bl	8001c48 <SysTick_Config>
 8001ce8:	4603      	mov	r3, r0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b087      	sub	sp, #28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d02:	e148      	b.n	8001f96 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	2101      	movs	r1, #1
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d10:	4013      	ands	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 813a 	beq.w	8001f90 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d005      	beq.n	8001d34 <HAL_GPIO_Init+0x40>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d130      	bne.n	8001d96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	2203      	movs	r2, #3
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4013      	ands	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	091b      	lsrs	r3, r3, #4
 8001d80:	f003 0201 	and.w	r2, r3, #1
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	d017      	beq.n	8001dd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	2203      	movs	r2, #3
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4013      	ands	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d123      	bne.n	8001e26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	08da      	lsrs	r2, r3, #3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3208      	adds	r2, #8
 8001de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	220f      	movs	r2, #15
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	691a      	ldr	r2, [r3, #16]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	08da      	lsrs	r2, r3, #3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3208      	adds	r2, #8
 8001e20:	6939      	ldr	r1, [r7, #16]
 8001e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	2203      	movs	r2, #3
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 0203 	and.w	r2, r3, #3
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8094 	beq.w	8001f90 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e68:	4b52      	ldr	r3, [pc, #328]	@ (8001fb4 <HAL_GPIO_Init+0x2c0>)
 8001e6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e6c:	4a51      	ldr	r2, [pc, #324]	@ (8001fb4 <HAL_GPIO_Init+0x2c0>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e74:	4b4f      	ldr	r3, [pc, #316]	@ (8001fb4 <HAL_GPIO_Init+0x2c0>)
 8001e76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e80:	4a4d      	ldr	r2, [pc, #308]	@ (8001fb8 <HAL_GPIO_Init+0x2c4>)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	089b      	lsrs	r3, r3, #2
 8001e86:	3302      	adds	r3, #2
 8001e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	220f      	movs	r2, #15
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001eaa:	d00d      	beq.n	8001ec8 <HAL_GPIO_Init+0x1d4>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a43      	ldr	r2, [pc, #268]	@ (8001fbc <HAL_GPIO_Init+0x2c8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d007      	beq.n	8001ec4 <HAL_GPIO_Init+0x1d0>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a42      	ldr	r2, [pc, #264]	@ (8001fc0 <HAL_GPIO_Init+0x2cc>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d101      	bne.n	8001ec0 <HAL_GPIO_Init+0x1cc>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e004      	b.n	8001eca <HAL_GPIO_Init+0x1d6>
 8001ec0:	2307      	movs	r3, #7
 8001ec2:	e002      	b.n	8001eca <HAL_GPIO_Init+0x1d6>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <HAL_GPIO_Init+0x1d6>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	f002 0203 	and.w	r2, r2, #3
 8001ed0:	0092      	lsls	r2, r2, #2
 8001ed2:	4093      	lsls	r3, r2
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eda:	4937      	ldr	r1, [pc, #220]	@ (8001fb8 <HAL_GPIO_Init+0x2c4>)
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	089b      	lsrs	r3, r3, #2
 8001ee0:	3302      	adds	r3, #2
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ee8:	4b36      	ldr	r3, [pc, #216]	@ (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f0c:	4a2d      	ldr	r2, [pc, #180]	@ (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f12:	4b2c      	ldr	r3, [pc, #176]	@ (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f36:	4a23      	ldr	r2, [pc, #140]	@ (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f3c:	4b21      	ldr	r3, [pc, #132]	@ (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f60:	4a18      	ldr	r2, [pc, #96]	@ (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f66:	4b17      	ldr	r3, [pc, #92]	@ (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	3301      	adds	r3, #1
 8001f94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f47f aeaf 	bne.w	8001d04 <HAL_GPIO_Init+0x10>
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	bf00      	nop
 8001faa:	371c      	adds	r7, #28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40010000 	.word	0x40010000
 8001fbc:	48000400 	.word	0x48000400
 8001fc0:	48000800 	.word	0x48000800
 8001fc4:	40010400 	.word	0x40010400

08001fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	807b      	strh	r3, [r7, #2]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fd8:	787b      	ldrb	r3, [r7, #1]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fde:	887a      	ldrh	r2, [r7, #2]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fe4:	e002      	b.n	8001fec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fe6:	887a      	ldrh	r2, [r7, #2]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e08d      	b.n	8002126 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d106      	bne.n	8002024 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7fe ff44 	bl	8000eac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2224      	movs	r2, #36	@ 0x24
 8002028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0201 	bic.w	r2, r2, #1
 800203a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002048:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002058:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d107      	bne.n	8002072 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	e006      	b.n	8002080 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800207e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	2b02      	cmp	r3, #2
 8002086:	d108      	bne.n	800209a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	e007      	b.n	80020aa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68da      	ldr	r2, [r3, #12]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691a      	ldr	r2, [r3, #16]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69d9      	ldr	r1, [r3, #28]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1a      	ldr	r2, [r3, #32]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0201 	orr.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2220      	movs	r2, #32
 8002112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af02      	add	r7, sp, #8
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	4608      	mov	r0, r1
 800213a:	4611      	mov	r1, r2
 800213c:	461a      	mov	r2, r3
 800213e:	4603      	mov	r3, r0
 8002140:	817b      	strh	r3, [r7, #10]
 8002142:	460b      	mov	r3, r1
 8002144:	813b      	strh	r3, [r7, #8]
 8002146:	4613      	mov	r3, r2
 8002148:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b20      	cmp	r3, #32
 8002154:	f040 80f9 	bne.w	800234a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002158:	6a3b      	ldr	r3, [r7, #32]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <HAL_I2C_Mem_Write+0x34>
 800215e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002160:	2b00      	cmp	r3, #0
 8002162:	d105      	bne.n	8002170 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800216a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0ed      	b.n	800234c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <HAL_I2C_Mem_Write+0x4e>
 800217a:	2302      	movs	r3, #2
 800217c:	e0e6      	b.n	800234c <HAL_I2C_Mem_Write+0x21c>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002186:	f7ff fc9f 	bl	8001ac8 <HAL_GetTick>
 800218a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	2319      	movs	r3, #25
 8002192:	2201      	movs	r2, #1
 8002194:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f000 fac3 	bl	8002724 <I2C_WaitOnFlagUntilTimeout>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0d1      	b.n	800234c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2221      	movs	r2, #33	@ 0x21
 80021ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2240      	movs	r2, #64	@ 0x40
 80021b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6a3a      	ldr	r2, [r7, #32]
 80021c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80021c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021d0:	88f8      	ldrh	r0, [r7, #6]
 80021d2:	893a      	ldrh	r2, [r7, #8]
 80021d4:	8979      	ldrh	r1, [r7, #10]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	9301      	str	r3, [sp, #4]
 80021da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	4603      	mov	r3, r0
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f000 f9d3 	bl	800258c <I2C_RequestMemoryWrite>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0a9      	b.n	800234c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	2bff      	cmp	r3, #255	@ 0xff
 8002200:	d90e      	bls.n	8002220 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	22ff      	movs	r2, #255	@ 0xff
 8002206:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800220c:	b2da      	uxtb	r2, r3
 800220e:	8979      	ldrh	r1, [r7, #10]
 8002210:	2300      	movs	r3, #0
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 fc47 	bl	8002aac <I2C_TransferConfig>
 800221e:	e00f      	b.n	8002240 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002224:	b29a      	uxth	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800222e:	b2da      	uxtb	r2, r3
 8002230:	8979      	ldrh	r1, [r7, #10]
 8002232:	2300      	movs	r3, #0
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 fc36 	bl	8002aac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 fac6 	bl	80027d6 <I2C_WaitOnTXISFlagUntilTimeout>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e07b      	b.n	800234c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002258:	781a      	ldrb	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800226e:	b29b      	uxth	r3, r3
 8002270:	3b01      	subs	r3, #1
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800227c:	3b01      	subs	r3, #1
 800227e:	b29a      	uxth	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002288:	b29b      	uxth	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d034      	beq.n	80022f8 <HAL_I2C_Mem_Write+0x1c8>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002292:	2b00      	cmp	r3, #0
 8002294:	d130      	bne.n	80022f8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800229c:	2200      	movs	r2, #0
 800229e:	2180      	movs	r1, #128	@ 0x80
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 fa3f 	bl	8002724 <I2C_WaitOnFlagUntilTimeout>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e04d      	b.n	800234c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	2bff      	cmp	r3, #255	@ 0xff
 80022b8:	d90e      	bls.n	80022d8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	22ff      	movs	r2, #255	@ 0xff
 80022be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	8979      	ldrh	r1, [r7, #10]
 80022c8:	2300      	movs	r3, #0
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 fbeb 	bl	8002aac <I2C_TransferConfig>
 80022d6:	e00f      	b.n	80022f8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	8979      	ldrh	r1, [r7, #10]
 80022ea:	2300      	movs	r3, #0
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 fbda 	bl	8002aac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d19e      	bne.n	8002240 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 faac 	bl	8002864 <I2C_WaitOnSTOPFlagUntilTimeout>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e01a      	b.n	800234c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2220      	movs	r2, #32
 800231c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6859      	ldr	r1, [r3, #4]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4b0a      	ldr	r3, [pc, #40]	@ (8002354 <HAL_I2C_Mem_Write+0x224>)
 800232a:	400b      	ands	r3, r1
 800232c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2220      	movs	r2, #32
 8002332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	e000      	b.n	800234c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800234a:	2302      	movs	r3, #2
  }
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	fe00e800 	.word	0xfe00e800

08002358 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af02      	add	r7, sp, #8
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	4608      	mov	r0, r1
 8002362:	4611      	mov	r1, r2
 8002364:	461a      	mov	r2, r3
 8002366:	4603      	mov	r3, r0
 8002368:	817b      	strh	r3, [r7, #10]
 800236a:	460b      	mov	r3, r1
 800236c:	813b      	strh	r3, [r7, #8]
 800236e:	4613      	mov	r3, r2
 8002370:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b20      	cmp	r3, #32
 800237c:	f040 80fd 	bne.w	800257a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <HAL_I2C_Mem_Read+0x34>
 8002386:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002388:	2b00      	cmp	r3, #0
 800238a:	d105      	bne.n	8002398 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002392:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0f1      	b.n	800257c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <HAL_I2C_Mem_Read+0x4e>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e0ea      	b.n	800257c <HAL_I2C_Mem_Read+0x224>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023ae:	f7ff fb8b 	bl	8001ac8 <HAL_GetTick>
 80023b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	2319      	movs	r3, #25
 80023ba:	2201      	movs	r2, #1
 80023bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 f9af 	bl	8002724 <I2C_WaitOnFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0d5      	b.n	800257c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2222      	movs	r2, #34	@ 0x22
 80023d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2240      	movs	r2, #64	@ 0x40
 80023dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6a3a      	ldr	r2, [r7, #32]
 80023ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80023f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023f8:	88f8      	ldrh	r0, [r7, #6]
 80023fa:	893a      	ldrh	r2, [r7, #8]
 80023fc:	8979      	ldrh	r1, [r7, #10]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	9301      	str	r3, [sp, #4]
 8002402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	4603      	mov	r3, r0
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 f913 	bl	8002634 <I2C_RequestMemoryRead>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0ad      	b.n	800257c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002424:	b29b      	uxth	r3, r3
 8002426:	2bff      	cmp	r3, #255	@ 0xff
 8002428:	d90e      	bls.n	8002448 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2201      	movs	r2, #1
 800242e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002434:	b2da      	uxtb	r2, r3
 8002436:	8979      	ldrh	r1, [r7, #10]
 8002438:	4b52      	ldr	r3, [pc, #328]	@ (8002584 <HAL_I2C_Mem_Read+0x22c>)
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 fb33 	bl	8002aac <I2C_TransferConfig>
 8002446:	e00f      	b.n	8002468 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002456:	b2da      	uxtb	r2, r3
 8002458:	8979      	ldrh	r1, [r7, #10]
 800245a:	4b4a      	ldr	r3, [pc, #296]	@ (8002584 <HAL_I2C_Mem_Read+0x22c>)
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 fb22 	bl	8002aac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800246e:	2200      	movs	r2, #0
 8002470:	2104      	movs	r1, #4
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 f956 	bl	8002724 <I2C_WaitOnFlagUntilTimeout>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e07c      	b.n	800257c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d034      	beq.n	8002528 <HAL_I2C_Mem_Read+0x1d0>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d130      	bne.n	8002528 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024cc:	2200      	movs	r2, #0
 80024ce:	2180      	movs	r1, #128	@ 0x80
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 f927 	bl	8002724 <I2C_WaitOnFlagUntilTimeout>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e04d      	b.n	800257c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	2bff      	cmp	r3, #255	@ 0xff
 80024e8:	d90e      	bls.n	8002508 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2201      	movs	r2, #1
 80024ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	8979      	ldrh	r1, [r7, #10]
 80024f8:	2300      	movs	r3, #0
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 fad3 	bl	8002aac <I2C_TransferConfig>
 8002506:	e00f      	b.n	8002528 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002516:	b2da      	uxtb	r2, r3
 8002518:	8979      	ldrh	r1, [r7, #10]
 800251a:	2300      	movs	r3, #0
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 fac2 	bl	8002aac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800252c:	b29b      	uxth	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d19a      	bne.n	8002468 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f994 	bl	8002864 <I2C_WaitOnSTOPFlagUntilTimeout>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e01a      	b.n	800257c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2220      	movs	r2, #32
 800254c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6859      	ldr	r1, [r3, #4]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4b0b      	ldr	r3, [pc, #44]	@ (8002588 <HAL_I2C_Mem_Read+0x230>)
 800255a:	400b      	ands	r3, r1
 800255c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2220      	movs	r2, #32
 8002562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	e000      	b.n	800257c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800257a:	2302      	movs	r3, #2
  }
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	80002400 	.word	0x80002400
 8002588:	fe00e800 	.word	0xfe00e800

0800258c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af02      	add	r7, sp, #8
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	4608      	mov	r0, r1
 8002596:	4611      	mov	r1, r2
 8002598:	461a      	mov	r2, r3
 800259a:	4603      	mov	r3, r0
 800259c:	817b      	strh	r3, [r7, #10]
 800259e:	460b      	mov	r3, r1
 80025a0:	813b      	strh	r3, [r7, #8]
 80025a2:	4613      	mov	r3, r2
 80025a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	8979      	ldrh	r1, [r7, #10]
 80025ac:	4b20      	ldr	r3, [pc, #128]	@ (8002630 <I2C_RequestMemoryWrite+0xa4>)
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 fa79 	bl	8002aac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	69b9      	ldr	r1, [r7, #24]
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 f909 	bl	80027d6 <I2C_WaitOnTXISFlagUntilTimeout>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e02c      	b.n	8002628 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025ce:	88fb      	ldrh	r3, [r7, #6]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d105      	bne.n	80025e0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025d4:	893b      	ldrh	r3, [r7, #8]
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80025de:	e015      	b.n	800260c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80025e0:	893b      	ldrh	r3, [r7, #8]
 80025e2:	0a1b      	lsrs	r3, r3, #8
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ee:	69fa      	ldr	r2, [r7, #28]
 80025f0:	69b9      	ldr	r1, [r7, #24]
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 f8ef 	bl	80027d6 <I2C_WaitOnTXISFlagUntilTimeout>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e012      	b.n	8002628 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002602:	893b      	ldrh	r3, [r7, #8]
 8002604:	b2da      	uxtb	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	2200      	movs	r2, #0
 8002614:	2180      	movs	r1, #128	@ 0x80
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 f884 	bl	8002724 <I2C_WaitOnFlagUntilTimeout>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	80002000 	.word	0x80002000

08002634 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af02      	add	r7, sp, #8
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	4608      	mov	r0, r1
 800263e:	4611      	mov	r1, r2
 8002640:	461a      	mov	r2, r3
 8002642:	4603      	mov	r3, r0
 8002644:	817b      	strh	r3, [r7, #10]
 8002646:	460b      	mov	r3, r1
 8002648:	813b      	strh	r3, [r7, #8]
 800264a:	4613      	mov	r3, r2
 800264c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800264e:	88fb      	ldrh	r3, [r7, #6]
 8002650:	b2da      	uxtb	r2, r3
 8002652:	8979      	ldrh	r1, [r7, #10]
 8002654:	4b20      	ldr	r3, [pc, #128]	@ (80026d8 <I2C_RequestMemoryRead+0xa4>)
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	2300      	movs	r3, #0
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 fa26 	bl	8002aac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002660:	69fa      	ldr	r2, [r7, #28]
 8002662:	69b9      	ldr	r1, [r7, #24]
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f8b6 	bl	80027d6 <I2C_WaitOnTXISFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e02c      	b.n	80026ce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d105      	bne.n	8002686 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800267a:	893b      	ldrh	r3, [r7, #8]
 800267c:	b2da      	uxtb	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	629a      	str	r2, [r3, #40]	@ 0x28
 8002684:	e015      	b.n	80026b2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002686:	893b      	ldrh	r3, [r7, #8]
 8002688:	0a1b      	lsrs	r3, r3, #8
 800268a:	b29b      	uxth	r3, r3
 800268c:	b2da      	uxtb	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002694:	69fa      	ldr	r2, [r7, #28]
 8002696:	69b9      	ldr	r1, [r7, #24]
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 f89c 	bl	80027d6 <I2C_WaitOnTXISFlagUntilTimeout>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e012      	b.n	80026ce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026a8:	893b      	ldrh	r3, [r7, #8]
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	2200      	movs	r2, #0
 80026ba:	2140      	movs	r1, #64	@ 0x40
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 f831 	bl	8002724 <I2C_WaitOnFlagUntilTimeout>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	80002000 	.word	0x80002000

080026dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d103      	bne.n	80026fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2200      	movs	r2, #0
 80026f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b01      	cmp	r3, #1
 8002706:	d007      	beq.n	8002718 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699a      	ldr	r2, [r3, #24]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0201 	orr.w	r2, r2, #1
 8002716:	619a      	str	r2, [r3, #24]
  }
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	603b      	str	r3, [r7, #0]
 8002730:	4613      	mov	r3, r2
 8002732:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002734:	e03b      	b.n	80027ae <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	6839      	ldr	r1, [r7, #0]
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f8d6 	bl	80028ec <I2C_IsErrorOccurred>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e041      	b.n	80027ce <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002750:	d02d      	beq.n	80027ae <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002752:	f7ff f9b9 	bl	8001ac8 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d302      	bcc.n	8002768 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d122      	bne.n	80027ae <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699a      	ldr	r2, [r3, #24]
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	4013      	ands	r3, r2
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	429a      	cmp	r2, r3
 8002776:	bf0c      	ite	eq
 8002778:	2301      	moveq	r3, #1
 800277a:	2300      	movne	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	461a      	mov	r2, r3
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	429a      	cmp	r2, r3
 8002784:	d113      	bne.n	80027ae <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278a:	f043 0220 	orr.w	r2, r3, #32
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2220      	movs	r2, #32
 8002796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e00f      	b.n	80027ce <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699a      	ldr	r2, [r3, #24]
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	4013      	ands	r3, r2
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	bf0c      	ite	eq
 80027be:	2301      	moveq	r3, #1
 80027c0:	2300      	movne	r3, #0
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d0b4      	beq.n	8002736 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b084      	sub	sp, #16
 80027da:	af00      	add	r7, sp, #0
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027e2:	e033      	b.n	800284c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	68b9      	ldr	r1, [r7, #8]
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 f87f 	bl	80028ec <I2C_IsErrorOccurred>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e031      	b.n	800285c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fe:	d025      	beq.n	800284c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002800:	f7ff f962 	bl	8001ac8 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	429a      	cmp	r2, r3
 800280e:	d302      	bcc.n	8002816 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d11a      	bne.n	800284c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b02      	cmp	r3, #2
 8002822:	d013      	beq.n	800284c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002828:	f043 0220 	orr.w	r2, r3, #32
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e007      	b.n	800285c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b02      	cmp	r3, #2
 8002858:	d1c4      	bne.n	80027e4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002870:	e02f      	b.n	80028d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	68b9      	ldr	r1, [r7, #8]
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 f838 	bl	80028ec <I2C_IsErrorOccurred>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e02d      	b.n	80028e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002886:	f7ff f91f 	bl	8001ac8 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	429a      	cmp	r2, r3
 8002894:	d302      	bcc.n	800289c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d11a      	bne.n	80028d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	f003 0320 	and.w	r3, r3, #32
 80028a6:	2b20      	cmp	r3, #32
 80028a8:	d013      	beq.n	80028d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	f043 0220 	orr.w	r2, r3, #32
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2220      	movs	r2, #32
 80028ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e007      	b.n	80028e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	f003 0320 	and.w	r3, r3, #32
 80028dc:	2b20      	cmp	r3, #32
 80028de:	d1c8      	bne.n	8002872 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08a      	sub	sp, #40	@ 0x28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028f8:	2300      	movs	r3, #0
 80028fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	2b00      	cmp	r3, #0
 8002916:	d068      	beq.n	80029ea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2210      	movs	r2, #16
 800291e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002920:	e049      	b.n	80029b6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002928:	d045      	beq.n	80029b6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800292a:	f7ff f8cd 	bl	8001ac8 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	429a      	cmp	r2, r3
 8002938:	d302      	bcc.n	8002940 <I2C_IsErrorOccurred+0x54>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d13a      	bne.n	80029b6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800294a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002952:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800295e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002962:	d121      	bne.n	80029a8 <I2C_IsErrorOccurred+0xbc>
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800296a:	d01d      	beq.n	80029a8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800296c:	7cfb      	ldrb	r3, [r7, #19]
 800296e:	2b20      	cmp	r3, #32
 8002970:	d01a      	beq.n	80029a8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002980:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002982:	f7ff f8a1 	bl	8001ac8 <HAL_GetTick>
 8002986:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002988:	e00e      	b.n	80029a8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800298a:	f7ff f89d 	bl	8001ac8 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b19      	cmp	r3, #25
 8002996:	d907      	bls.n	80029a8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	f043 0320 	orr.w	r3, r3, #32
 800299e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80029a6:	e006      	b.n	80029b6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	2b20      	cmp	r3, #32
 80029b4:	d1e9      	bne.n	800298a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	f003 0320 	and.w	r3, r3, #32
 80029c0:	2b20      	cmp	r3, #32
 80029c2:	d003      	beq.n	80029cc <I2C_IsErrorOccurred+0xe0>
 80029c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0aa      	beq.n	8002922 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d103      	bne.n	80029dc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2220      	movs	r2, #32
 80029da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	f043 0304 	orr.w	r3, r3, #4
 80029e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00b      	beq.n	8002a14 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00b      	beq.n	8002a36 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	f043 0308 	orr.w	r3, r3, #8
 8002a24:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a2e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00b      	beq.n	8002a58 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	f043 0302 	orr.w	r3, r3, #2
 8002a46:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002a58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d01c      	beq.n	8002a9a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f7ff fe3b 	bl	80026dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6859      	ldr	r1, [r3, #4]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa8 <I2C_IsErrorOccurred+0x1bc>)
 8002a72:	400b      	ands	r3, r1
 8002a74:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2220      	movs	r2, #32
 8002a86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002a9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3728      	adds	r7, #40	@ 0x28
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	fe00e800 	.word	0xfe00e800

08002aac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	607b      	str	r3, [r7, #4]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	817b      	strh	r3, [r7, #10]
 8002aba:	4613      	mov	r3, r2
 8002abc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002abe:	897b      	ldrh	r3, [r7, #10]
 8002ac0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ac4:	7a7b      	ldrb	r3, [r7, #9]
 8002ac6:	041b      	lsls	r3, r3, #16
 8002ac8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002acc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ada:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	0d5b      	lsrs	r3, r3, #21
 8002ae6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002aea:	4b08      	ldr	r3, [pc, #32]	@ (8002b0c <I2C_TransferConfig+0x60>)
 8002aec:	430b      	orrs	r3, r1
 8002aee:	43db      	mvns	r3, r3
 8002af0:	ea02 0103 	and.w	r1, r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002afe:	bf00      	nop
 8002b00:	371c      	adds	r7, #28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	03ff63ff 	.word	0x03ff63ff

08002b10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b20      	cmp	r3, #32
 8002b24:	d138      	bne.n	8002b98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e032      	b.n	8002b9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2224      	movs	r2, #36	@ 0x24
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0201 	bic.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6819      	ldr	r1, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0201 	orr.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	e000      	b.n	8002b9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b98:	2302      	movs	r3, #2
  }
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b085      	sub	sp, #20
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d139      	bne.n	8002c30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e033      	b.n	8002c32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2224      	movs	r2, #36	@ 0x24
 8002bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0201 	bic.w	r2, r2, #1
 8002be8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002bf8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	021b      	lsls	r3, r3, #8
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e000      	b.n	8002c32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c30:	2302      	movs	r3, #2
  }
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
	...

08002c40 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c44:	4b05      	ldr	r3, [pc, #20]	@ (8002c5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a04      	ldr	r2, [pc, #16]	@ (8002c5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c4e:	6013      	str	r3, [r2, #0]
}
 8002c50:	bf00      	nop
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40007000 	.word	0x40007000

08002c60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c64:	4b04      	ldr	r3, [pc, #16]	@ (8002c78 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	40007000 	.word	0x40007000

08002c7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c8a:	d130      	bne.n	8002cee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c8c:	4b23      	ldr	r3, [pc, #140]	@ (8002d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c98:	d038      	beq.n	8002d0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c9a:	4b20      	ldr	r3, [pc, #128]	@ (8002d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ca2:	4a1e      	ldr	r2, [pc, #120]	@ (8002d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ca4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ca8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002caa:	4b1d      	ldr	r3, [pc, #116]	@ (8002d20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2232      	movs	r2, #50	@ 0x32
 8002cb0:	fb02 f303 	mul.w	r3, r2, r3
 8002cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8002d24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cba:	0c9b      	lsrs	r3, r3, #18
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cc0:	e002      	b.n	8002cc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cc8:	4b14      	ldr	r3, [pc, #80]	@ (8002d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cd4:	d102      	bne.n	8002cdc <HAL_PWREx_ControlVoltageScaling+0x60>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f2      	bne.n	8002cc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8002d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ce4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ce8:	d110      	bne.n	8002d0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e00f      	b.n	8002d0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cee:	4b0b      	ldr	r3, [pc, #44]	@ (8002d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002cf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cfa:	d007      	beq.n	8002d0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cfc:	4b07      	ldr	r3, [pc, #28]	@ (8002d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d04:	4a05      	ldr	r2, [pc, #20]	@ (8002d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40007000 	.word	0x40007000
 8002d20:	20000090 	.word	0x20000090
 8002d24:	431bde83 	.word	0x431bde83

08002d28 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d102      	bne.n	8002d3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	f000 bc02 	b.w	8003540 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d3c:	4b96      	ldr	r3, [pc, #600]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 030c 	and.w	r3, r3, #12
 8002d44:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d46:	4b94      	ldr	r3, [pc, #592]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 80e4 	beq.w	8002f26 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d007      	beq.n	8002d74 <HAL_RCC_OscConfig+0x4c>
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	2b0c      	cmp	r3, #12
 8002d68:	f040 808b 	bne.w	8002e82 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	f040 8087 	bne.w	8002e82 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d74:	4b88      	ldr	r3, [pc, #544]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_OscConfig+0x64>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e3d9      	b.n	8003540 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1a      	ldr	r2, [r3, #32]
 8002d90:	4b81      	ldr	r3, [pc, #516]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d004      	beq.n	8002da6 <HAL_RCC_OscConfig+0x7e>
 8002d9c:	4b7e      	ldr	r3, [pc, #504]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002da4:	e005      	b.n	8002db2 <HAL_RCC_OscConfig+0x8a>
 8002da6:	4b7c      	ldr	r3, [pc, #496]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d223      	bcs.n	8002dfe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 fd8c 	bl	80038d8 <RCC_SetFlashLatencyFromMSIRange>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e3ba      	b.n	8003540 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dca:	4b73      	ldr	r3, [pc, #460]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a72      	ldr	r2, [pc, #456]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002dd0:	f043 0308 	orr.w	r3, r3, #8
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	4b70      	ldr	r3, [pc, #448]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	496d      	ldr	r1, [pc, #436]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002de8:	4b6b      	ldr	r3, [pc, #428]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	021b      	lsls	r3, r3, #8
 8002df6:	4968      	ldr	r1, [pc, #416]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	604b      	str	r3, [r1, #4]
 8002dfc:	e025      	b.n	8002e4a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dfe:	4b66      	ldr	r3, [pc, #408]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a65      	ldr	r2, [pc, #404]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002e04:	f043 0308 	orr.w	r3, r3, #8
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	4b63      	ldr	r3, [pc, #396]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	4960      	ldr	r1, [pc, #384]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e1c:	4b5e      	ldr	r3, [pc, #376]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	021b      	lsls	r3, r3, #8
 8002e2a:	495b      	ldr	r1, [pc, #364]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fd4c 	bl	80038d8 <RCC_SetFlashLatencyFromMSIRange>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e37a      	b.n	8003540 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e4a:	f000 fc81 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	4b51      	ldr	r3, [pc, #324]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	091b      	lsrs	r3, r3, #4
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	4950      	ldr	r1, [pc, #320]	@ (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002e5c:	5ccb      	ldrb	r3, [r1, r3]
 8002e5e:	f003 031f 	and.w	r3, r3, #31
 8002e62:	fa22 f303 	lsr.w	r3, r2, r3
 8002e66:	4a4e      	ldr	r2, [pc, #312]	@ (8002fa0 <HAL_RCC_OscConfig+0x278>)
 8002e68:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e6a:	4b4e      	ldr	r3, [pc, #312]	@ (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fe fdda 	bl	8001a28 <HAL_InitTick>
 8002e74:	4603      	mov	r3, r0
 8002e76:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d052      	beq.n	8002f24 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	e35e      	b.n	8003540 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d032      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e8a:	4b43      	ldr	r3, [pc, #268]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a42      	ldr	r2, [pc, #264]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e96:	f7fe fe17 	bl	8001ac8 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e9e:	f7fe fe13 	bl	8001ac8 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e347      	b.n	8003540 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eb0:	4b39      	ldr	r3, [pc, #228]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ebc:	4b36      	ldr	r3, [pc, #216]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a35      	ldr	r2, [pc, #212]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002ec2:	f043 0308 	orr.w	r3, r3, #8
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	4b33      	ldr	r3, [pc, #204]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	4930      	ldr	r1, [pc, #192]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eda:	4b2f      	ldr	r3, [pc, #188]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	021b      	lsls	r3, r3, #8
 8002ee8:	492b      	ldr	r1, [pc, #172]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	604b      	str	r3, [r1, #4]
 8002eee:	e01a      	b.n	8002f26 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ef0:	4b29      	ldr	r3, [pc, #164]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a28      	ldr	r2, [pc, #160]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002ef6:	f023 0301 	bic.w	r3, r3, #1
 8002efa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002efc:	f7fe fde4 	bl	8001ac8 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f04:	f7fe fde0 	bl	8001ac8 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e314      	b.n	8003540 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f16:	4b20      	ldr	r3, [pc, #128]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x1dc>
 8002f22:	e000      	b.n	8002f26 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d073      	beq.n	800301a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	d005      	beq.n	8002f44 <HAL_RCC_OscConfig+0x21c>
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	2b0c      	cmp	r3, #12
 8002f3c:	d10e      	bne.n	8002f5c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2b03      	cmp	r3, #3
 8002f42:	d10b      	bne.n	8002f5c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f44:	4b14      	ldr	r3, [pc, #80]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d063      	beq.n	8003018 <HAL_RCC_OscConfig+0x2f0>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d15f      	bne.n	8003018 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e2f1      	b.n	8003540 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f64:	d106      	bne.n	8002f74 <HAL_RCC_OscConfig+0x24c>
 8002f66:	4b0c      	ldr	r3, [pc, #48]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a0b      	ldr	r2, [pc, #44]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	e025      	b.n	8002fc0 <HAL_RCC_OscConfig+0x298>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f7c:	d114      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x280>
 8002f7e:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a05      	ldr	r2, [pc, #20]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002f84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	4b03      	ldr	r3, [pc, #12]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a02      	ldr	r2, [pc, #8]	@ (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002f90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	e013      	b.n	8002fc0 <HAL_RCC_OscConfig+0x298>
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	08005018 	.word	0x08005018
 8002fa0:	20000090 	.word	0x20000090
 8002fa4:	20000094 	.word	0x20000094
 8002fa8:	4ba0      	ldr	r3, [pc, #640]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a9f      	ldr	r2, [pc, #636]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 8002fae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	4b9d      	ldr	r3, [pc, #628]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a9c      	ldr	r2, [pc, #624]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 8002fba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d013      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fd7e 	bl	8001ac8 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd0:	f7fe fd7a 	bl	8001ac8 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b64      	cmp	r3, #100	@ 0x64
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e2ae      	b.n	8003540 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fe2:	4b92      	ldr	r3, [pc, #584]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0f0      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x2a8>
 8002fee:	e014      	b.n	800301a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff0:	f7fe fd6a 	bl	8001ac8 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff8:	f7fe fd66 	bl	8001ac8 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b64      	cmp	r3, #100	@ 0x64
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e29a      	b.n	8003540 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800300a:	4b88      	ldr	r3, [pc, #544]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1f0      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x2d0>
 8003016:	e000      	b.n	800301a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d060      	beq.n	80030e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	2b04      	cmp	r3, #4
 800302a:	d005      	beq.n	8003038 <HAL_RCC_OscConfig+0x310>
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	2b0c      	cmp	r3, #12
 8003030:	d119      	bne.n	8003066 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2b02      	cmp	r3, #2
 8003036:	d116      	bne.n	8003066 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003038:	4b7c      	ldr	r3, [pc, #496]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <HAL_RCC_OscConfig+0x328>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e277      	b.n	8003540 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003050:	4b76      	ldr	r3, [pc, #472]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	061b      	lsls	r3, r3, #24
 800305e:	4973      	ldr	r1, [pc, #460]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 8003060:	4313      	orrs	r3, r2
 8003062:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003064:	e040      	b.n	80030e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d023      	beq.n	80030b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800306e:	4b6f      	ldr	r3, [pc, #444]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a6e      	ldr	r2, [pc, #440]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 8003074:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307a:	f7fe fd25 	bl	8001ac8 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003082:	f7fe fd21 	bl	8001ac8 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e255      	b.n	8003540 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003094:	4b65      	ldr	r3, [pc, #404]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0f0      	beq.n	8003082 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a0:	4b62      	ldr	r3, [pc, #392]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	061b      	lsls	r3, r3, #24
 80030ae:	495f      	ldr	r1, [pc, #380]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	604b      	str	r3, [r1, #4]
 80030b4:	e018      	b.n	80030e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030b6:	4b5d      	ldr	r3, [pc, #372]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a5c      	ldr	r2, [pc, #368]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 80030bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c2:	f7fe fd01 	bl	8001ac8 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ca:	f7fe fcfd 	bl	8001ac8 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e231      	b.n	8003540 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030dc:	4b53      	ldr	r3, [pc, #332]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1f0      	bne.n	80030ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0308 	and.w	r3, r3, #8
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d03c      	beq.n	800316e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d01c      	beq.n	8003136 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030fc:	4b4b      	ldr	r3, [pc, #300]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 80030fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003102:	4a4a      	ldr	r2, [pc, #296]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310c:	f7fe fcdc 	bl	8001ac8 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003114:	f7fe fcd8 	bl	8001ac8 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e20c      	b.n	8003540 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003126:	4b41      	ldr	r3, [pc, #260]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 8003128:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0ef      	beq.n	8003114 <HAL_RCC_OscConfig+0x3ec>
 8003134:	e01b      	b.n	800316e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003136:	4b3d      	ldr	r3, [pc, #244]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 8003138:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800313c:	4a3b      	ldr	r2, [pc, #236]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 800313e:	f023 0301 	bic.w	r3, r3, #1
 8003142:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003146:	f7fe fcbf 	bl	8001ac8 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800314e:	f7fe fcbb 	bl	8001ac8 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e1ef      	b.n	8003540 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003160:	4b32      	ldr	r3, [pc, #200]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 8003162:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1ef      	bne.n	800314e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 80a6 	beq.w	80032c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800317c:	2300      	movs	r3, #0
 800317e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003180:	4b2a      	ldr	r3, [pc, #168]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 8003182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003184:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10d      	bne.n	80031a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800318c:	4b27      	ldr	r3, [pc, #156]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 800318e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003190:	4a26      	ldr	r2, [pc, #152]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 8003192:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003196:	6593      	str	r3, [r2, #88]	@ 0x58
 8003198:	4b24      	ldr	r3, [pc, #144]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 800319a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800319c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a4:	2301      	movs	r3, #1
 80031a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031a8:	4b21      	ldr	r3, [pc, #132]	@ (8003230 <HAL_RCC_OscConfig+0x508>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d118      	bne.n	80031e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003230 <HAL_RCC_OscConfig+0x508>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003230 <HAL_RCC_OscConfig+0x508>)
 80031ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c0:	f7fe fc82 	bl	8001ac8 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c8:	f7fe fc7e 	bl	8001ac8 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e1b2      	b.n	8003540 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031da:	4b15      	ldr	r3, [pc, #84]	@ (8003230 <HAL_RCC_OscConfig+0x508>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d108      	bne.n	8003200 <HAL_RCC_OscConfig+0x4d8>
 80031ee:	4b0f      	ldr	r3, [pc, #60]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 80031f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f4:	4a0d      	ldr	r2, [pc, #52]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031fe:	e029      	b.n	8003254 <HAL_RCC_OscConfig+0x52c>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b05      	cmp	r3, #5
 8003206:	d115      	bne.n	8003234 <HAL_RCC_OscConfig+0x50c>
 8003208:	4b08      	ldr	r3, [pc, #32]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 800320a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800320e:	4a07      	ldr	r2, [pc, #28]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 8003210:	f043 0304 	orr.w	r3, r3, #4
 8003214:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003218:	4b04      	ldr	r3, [pc, #16]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800321e:	4a03      	ldr	r2, [pc, #12]	@ (800322c <HAL_RCC_OscConfig+0x504>)
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003228:	e014      	b.n	8003254 <HAL_RCC_OscConfig+0x52c>
 800322a:	bf00      	nop
 800322c:	40021000 	.word	0x40021000
 8003230:	40007000 	.word	0x40007000
 8003234:	4b9a      	ldr	r3, [pc, #616]	@ (80034a0 <HAL_RCC_OscConfig+0x778>)
 8003236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800323a:	4a99      	ldr	r2, [pc, #612]	@ (80034a0 <HAL_RCC_OscConfig+0x778>)
 800323c:	f023 0301 	bic.w	r3, r3, #1
 8003240:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003244:	4b96      	ldr	r3, [pc, #600]	@ (80034a0 <HAL_RCC_OscConfig+0x778>)
 8003246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800324a:	4a95      	ldr	r2, [pc, #596]	@ (80034a0 <HAL_RCC_OscConfig+0x778>)
 800324c:	f023 0304 	bic.w	r3, r3, #4
 8003250:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d016      	beq.n	800328a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800325c:	f7fe fc34 	bl	8001ac8 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003262:	e00a      	b.n	800327a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003264:	f7fe fc30 	bl	8001ac8 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003272:	4293      	cmp	r3, r2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e162      	b.n	8003540 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800327a:	4b89      	ldr	r3, [pc, #548]	@ (80034a0 <HAL_RCC_OscConfig+0x778>)
 800327c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0ed      	beq.n	8003264 <HAL_RCC_OscConfig+0x53c>
 8003288:	e015      	b.n	80032b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328a:	f7fe fc1d 	bl	8001ac8 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003290:	e00a      	b.n	80032a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003292:	f7fe fc19 	bl	8001ac8 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e14b      	b.n	8003540 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032a8:	4b7d      	ldr	r3, [pc, #500]	@ (80034a0 <HAL_RCC_OscConfig+0x778>)
 80032aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1ed      	bne.n	8003292 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032b6:	7ffb      	ldrb	r3, [r7, #31]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d105      	bne.n	80032c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032bc:	4b78      	ldr	r3, [pc, #480]	@ (80034a0 <HAL_RCC_OscConfig+0x778>)
 80032be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c0:	4a77      	ldr	r2, [pc, #476]	@ (80034a0 <HAL_RCC_OscConfig+0x778>)
 80032c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032c6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d03c      	beq.n	800334e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d01c      	beq.n	8003316 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032dc:	4b70      	ldr	r3, [pc, #448]	@ (80034a0 <HAL_RCC_OscConfig+0x778>)
 80032de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032e2:	4a6f      	ldr	r2, [pc, #444]	@ (80034a0 <HAL_RCC_OscConfig+0x778>)
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ec:	f7fe fbec 	bl	8001ac8 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032f4:	f7fe fbe8 	bl	8001ac8 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e11c      	b.n	8003540 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003306:	4b66      	ldr	r3, [pc, #408]	@ (80034a0 <HAL_RCC_OscConfig+0x778>)
 8003308:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0ef      	beq.n	80032f4 <HAL_RCC_OscConfig+0x5cc>
 8003314:	e01b      	b.n	800334e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003316:	4b62      	ldr	r3, [pc, #392]	@ (80034a0 <HAL_RCC_OscConfig+0x778>)
 8003318:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800331c:	4a60      	ldr	r2, [pc, #384]	@ (80034a0 <HAL_RCC_OscConfig+0x778>)
 800331e:	f023 0301 	bic.w	r3, r3, #1
 8003322:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003326:	f7fe fbcf 	bl	8001ac8 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800332e:	f7fe fbcb 	bl	8001ac8 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e0ff      	b.n	8003540 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003340:	4b57      	ldr	r3, [pc, #348]	@ (80034a0 <HAL_RCC_OscConfig+0x778>)
 8003342:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1ef      	bne.n	800332e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 80f3 	beq.w	800353e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800335c:	2b02      	cmp	r3, #2
 800335e:	f040 80c9 	bne.w	80034f4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003362:	4b4f      	ldr	r3, [pc, #316]	@ (80034a0 <HAL_RCC_OscConfig+0x778>)
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f003 0203 	and.w	r2, r3, #3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003372:	429a      	cmp	r2, r3
 8003374:	d12c      	bne.n	80033d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003380:	3b01      	subs	r3, #1
 8003382:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003384:	429a      	cmp	r2, r3
 8003386:	d123      	bne.n	80033d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003392:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003394:	429a      	cmp	r2, r3
 8003396:	d11b      	bne.n	80033d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d113      	bne.n	80033d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b2:	085b      	lsrs	r3, r3, #1
 80033b4:	3b01      	subs	r3, #1
 80033b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d109      	bne.n	80033d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	085b      	lsrs	r3, r3, #1
 80033c8:	3b01      	subs	r3, #1
 80033ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d06b      	beq.n	80034a8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	2b0c      	cmp	r3, #12
 80033d4:	d062      	beq.n	800349c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033d6:	4b32      	ldr	r3, [pc, #200]	@ (80034a0 <HAL_RCC_OscConfig+0x778>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e0ac      	b.n	8003540 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033e6:	4b2e      	ldr	r3, [pc, #184]	@ (80034a0 <HAL_RCC_OscConfig+0x778>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a2d      	ldr	r2, [pc, #180]	@ (80034a0 <HAL_RCC_OscConfig+0x778>)
 80033ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033f2:	f7fe fb69 	bl	8001ac8 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033fa:	f7fe fb65 	bl	8001ac8 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e099      	b.n	8003540 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800340c:	4b24      	ldr	r3, [pc, #144]	@ (80034a0 <HAL_RCC_OscConfig+0x778>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1f0      	bne.n	80033fa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003418:	4b21      	ldr	r3, [pc, #132]	@ (80034a0 <HAL_RCC_OscConfig+0x778>)
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	4b21      	ldr	r3, [pc, #132]	@ (80034a4 <HAL_RCC_OscConfig+0x77c>)
 800341e:	4013      	ands	r3, r2
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003428:	3a01      	subs	r2, #1
 800342a:	0112      	lsls	r2, r2, #4
 800342c:	4311      	orrs	r1, r2
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003432:	0212      	lsls	r2, r2, #8
 8003434:	4311      	orrs	r1, r2
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800343a:	0852      	lsrs	r2, r2, #1
 800343c:	3a01      	subs	r2, #1
 800343e:	0552      	lsls	r2, r2, #21
 8003440:	4311      	orrs	r1, r2
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003446:	0852      	lsrs	r2, r2, #1
 8003448:	3a01      	subs	r2, #1
 800344a:	0652      	lsls	r2, r2, #25
 800344c:	4311      	orrs	r1, r2
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003452:	06d2      	lsls	r2, r2, #27
 8003454:	430a      	orrs	r2, r1
 8003456:	4912      	ldr	r1, [pc, #72]	@ (80034a0 <HAL_RCC_OscConfig+0x778>)
 8003458:	4313      	orrs	r3, r2
 800345a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800345c:	4b10      	ldr	r3, [pc, #64]	@ (80034a0 <HAL_RCC_OscConfig+0x778>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a0f      	ldr	r2, [pc, #60]	@ (80034a0 <HAL_RCC_OscConfig+0x778>)
 8003462:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003466:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003468:	4b0d      	ldr	r3, [pc, #52]	@ (80034a0 <HAL_RCC_OscConfig+0x778>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	4a0c      	ldr	r2, [pc, #48]	@ (80034a0 <HAL_RCC_OscConfig+0x778>)
 800346e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003472:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003474:	f7fe fb28 	bl	8001ac8 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347c:	f7fe fb24 	bl	8001ac8 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e058      	b.n	8003540 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348e:	4b04      	ldr	r3, [pc, #16]	@ (80034a0 <HAL_RCC_OscConfig+0x778>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0f0      	beq.n	800347c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800349a:	e050      	b.n	800353e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e04f      	b.n	8003540 <HAL_RCC_OscConfig+0x818>
 80034a0:	40021000 	.word	0x40021000
 80034a4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034a8:	4b27      	ldr	r3, [pc, #156]	@ (8003548 <HAL_RCC_OscConfig+0x820>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d144      	bne.n	800353e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034b4:	4b24      	ldr	r3, [pc, #144]	@ (8003548 <HAL_RCC_OscConfig+0x820>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a23      	ldr	r2, [pc, #140]	@ (8003548 <HAL_RCC_OscConfig+0x820>)
 80034ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034c0:	4b21      	ldr	r3, [pc, #132]	@ (8003548 <HAL_RCC_OscConfig+0x820>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	4a20      	ldr	r2, [pc, #128]	@ (8003548 <HAL_RCC_OscConfig+0x820>)
 80034c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034cc:	f7fe fafc 	bl	8001ac8 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d4:	f7fe faf8 	bl	8001ac8 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e02c      	b.n	8003540 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034e6:	4b18      	ldr	r3, [pc, #96]	@ (8003548 <HAL_RCC_OscConfig+0x820>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f0      	beq.n	80034d4 <HAL_RCC_OscConfig+0x7ac>
 80034f2:	e024      	b.n	800353e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	2b0c      	cmp	r3, #12
 80034f8:	d01f      	beq.n	800353a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fa:	4b13      	ldr	r3, [pc, #76]	@ (8003548 <HAL_RCC_OscConfig+0x820>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a12      	ldr	r2, [pc, #72]	@ (8003548 <HAL_RCC_OscConfig+0x820>)
 8003500:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003506:	f7fe fadf 	bl	8001ac8 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800350e:	f7fe fadb 	bl	8001ac8 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e00f      	b.n	8003540 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003520:	4b09      	ldr	r3, [pc, #36]	@ (8003548 <HAL_RCC_OscConfig+0x820>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1f0      	bne.n	800350e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800352c:	4b06      	ldr	r3, [pc, #24]	@ (8003548 <HAL_RCC_OscConfig+0x820>)
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	4905      	ldr	r1, [pc, #20]	@ (8003548 <HAL_RCC_OscConfig+0x820>)
 8003532:	4b06      	ldr	r3, [pc, #24]	@ (800354c <HAL_RCC_OscConfig+0x824>)
 8003534:	4013      	ands	r3, r2
 8003536:	60cb      	str	r3, [r1, #12]
 8003538:	e001      	b.n	800353e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3720      	adds	r7, #32
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40021000 	.word	0x40021000
 800354c:	feeefffc 	.word	0xfeeefffc

08003550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e0e7      	b.n	8003734 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003564:	4b75      	ldr	r3, [pc, #468]	@ (800373c <HAL_RCC_ClockConfig+0x1ec>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	429a      	cmp	r2, r3
 8003570:	d910      	bls.n	8003594 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003572:	4b72      	ldr	r3, [pc, #456]	@ (800373c <HAL_RCC_ClockConfig+0x1ec>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f023 0207 	bic.w	r2, r3, #7
 800357a:	4970      	ldr	r1, [pc, #448]	@ (800373c <HAL_RCC_ClockConfig+0x1ec>)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	4313      	orrs	r3, r2
 8003580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003582:	4b6e      	ldr	r3, [pc, #440]	@ (800373c <HAL_RCC_ClockConfig+0x1ec>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d001      	beq.n	8003594 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0cf      	b.n	8003734 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d010      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	4b66      	ldr	r3, [pc, #408]	@ (8003740 <HAL_RCC_ClockConfig+0x1f0>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d908      	bls.n	80035c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b0:	4b63      	ldr	r3, [pc, #396]	@ (8003740 <HAL_RCC_ClockConfig+0x1f0>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	4960      	ldr	r1, [pc, #384]	@ (8003740 <HAL_RCC_ClockConfig+0x1f0>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d04c      	beq.n	8003668 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d107      	bne.n	80035e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035d6:	4b5a      	ldr	r3, [pc, #360]	@ (8003740 <HAL_RCC_ClockConfig+0x1f0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d121      	bne.n	8003626 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e0a6      	b.n	8003734 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d107      	bne.n	80035fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ee:	4b54      	ldr	r3, [pc, #336]	@ (8003740 <HAL_RCC_ClockConfig+0x1f0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d115      	bne.n	8003626 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e09a      	b.n	8003734 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d107      	bne.n	8003616 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003606:	4b4e      	ldr	r3, [pc, #312]	@ (8003740 <HAL_RCC_ClockConfig+0x1f0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d109      	bne.n	8003626 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e08e      	b.n	8003734 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003616:	4b4a      	ldr	r3, [pc, #296]	@ (8003740 <HAL_RCC_ClockConfig+0x1f0>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e086      	b.n	8003734 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003626:	4b46      	ldr	r3, [pc, #280]	@ (8003740 <HAL_RCC_ClockConfig+0x1f0>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f023 0203 	bic.w	r2, r3, #3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	4943      	ldr	r1, [pc, #268]	@ (8003740 <HAL_RCC_ClockConfig+0x1f0>)
 8003634:	4313      	orrs	r3, r2
 8003636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003638:	f7fe fa46 	bl	8001ac8 <HAL_GetTick>
 800363c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363e:	e00a      	b.n	8003656 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003640:	f7fe fa42 	bl	8001ac8 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e06e      	b.n	8003734 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003656:	4b3a      	ldr	r3, [pc, #232]	@ (8003740 <HAL_RCC_ClockConfig+0x1f0>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 020c 	and.w	r2, r3, #12
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	429a      	cmp	r2, r3
 8003666:	d1eb      	bne.n	8003640 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d010      	beq.n	8003696 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	4b31      	ldr	r3, [pc, #196]	@ (8003740 <HAL_RCC_ClockConfig+0x1f0>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003680:	429a      	cmp	r2, r3
 8003682:	d208      	bcs.n	8003696 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003684:	4b2e      	ldr	r3, [pc, #184]	@ (8003740 <HAL_RCC_ClockConfig+0x1f0>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	492b      	ldr	r1, [pc, #172]	@ (8003740 <HAL_RCC_ClockConfig+0x1f0>)
 8003692:	4313      	orrs	r3, r2
 8003694:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003696:	4b29      	ldr	r3, [pc, #164]	@ (800373c <HAL_RCC_ClockConfig+0x1ec>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d210      	bcs.n	80036c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a4:	4b25      	ldr	r3, [pc, #148]	@ (800373c <HAL_RCC_ClockConfig+0x1ec>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f023 0207 	bic.w	r2, r3, #7
 80036ac:	4923      	ldr	r1, [pc, #140]	@ (800373c <HAL_RCC_ClockConfig+0x1ec>)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b4:	4b21      	ldr	r3, [pc, #132]	@ (800373c <HAL_RCC_ClockConfig+0x1ec>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d001      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e036      	b.n	8003734 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0304 	and.w	r3, r3, #4
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003740 <HAL_RCC_ClockConfig+0x1f0>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	4918      	ldr	r1, [pc, #96]	@ (8003740 <HAL_RCC_ClockConfig+0x1f0>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d009      	beq.n	8003704 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036f0:	4b13      	ldr	r3, [pc, #76]	@ (8003740 <HAL_RCC_ClockConfig+0x1f0>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4910      	ldr	r1, [pc, #64]	@ (8003740 <HAL_RCC_ClockConfig+0x1f0>)
 8003700:	4313      	orrs	r3, r2
 8003702:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003704:	f000 f824 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 8003708:	4602      	mov	r2, r0
 800370a:	4b0d      	ldr	r3, [pc, #52]	@ (8003740 <HAL_RCC_ClockConfig+0x1f0>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	091b      	lsrs	r3, r3, #4
 8003710:	f003 030f 	and.w	r3, r3, #15
 8003714:	490b      	ldr	r1, [pc, #44]	@ (8003744 <HAL_RCC_ClockConfig+0x1f4>)
 8003716:	5ccb      	ldrb	r3, [r1, r3]
 8003718:	f003 031f 	and.w	r3, r3, #31
 800371c:	fa22 f303 	lsr.w	r3, r2, r3
 8003720:	4a09      	ldr	r2, [pc, #36]	@ (8003748 <HAL_RCC_ClockConfig+0x1f8>)
 8003722:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003724:	4b09      	ldr	r3, [pc, #36]	@ (800374c <HAL_RCC_ClockConfig+0x1fc>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f7fe f97d 	bl	8001a28 <HAL_InitTick>
 800372e:	4603      	mov	r3, r0
 8003730:	72fb      	strb	r3, [r7, #11]

  return status;
 8003732:	7afb      	ldrb	r3, [r7, #11]
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40022000 	.word	0x40022000
 8003740:	40021000 	.word	0x40021000
 8003744:	08005018 	.word	0x08005018
 8003748:	20000090 	.word	0x20000090
 800374c:	20000094 	.word	0x20000094

08003750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003750:	b480      	push	{r7}
 8003752:	b089      	sub	sp, #36	@ 0x24
 8003754:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003756:	2300      	movs	r3, #0
 8003758:	61fb      	str	r3, [r7, #28]
 800375a:	2300      	movs	r3, #0
 800375c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800375e:	4b3e      	ldr	r3, [pc, #248]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x108>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 030c 	and.w	r3, r3, #12
 8003766:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003768:	4b3b      	ldr	r3, [pc, #236]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x108>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_RCC_GetSysClockFreq+0x34>
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	2b0c      	cmp	r3, #12
 800377c:	d121      	bne.n	80037c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d11e      	bne.n	80037c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003784:	4b34      	ldr	r3, [pc, #208]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x108>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b00      	cmp	r3, #0
 800378e:	d107      	bne.n	80037a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003790:	4b31      	ldr	r3, [pc, #196]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x108>)
 8003792:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003796:	0a1b      	lsrs	r3, r3, #8
 8003798:	f003 030f 	and.w	r3, r3, #15
 800379c:	61fb      	str	r3, [r7, #28]
 800379e:	e005      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x108>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	091b      	lsrs	r3, r3, #4
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037ac:	4a2b      	ldr	r2, [pc, #172]	@ (800385c <HAL_RCC_GetSysClockFreq+0x10c>)
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10d      	bne.n	80037d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037c0:	e00a      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d102      	bne.n	80037ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037c8:	4b25      	ldr	r3, [pc, #148]	@ (8003860 <HAL_RCC_GetSysClockFreq+0x110>)
 80037ca:	61bb      	str	r3, [r7, #24]
 80037cc:	e004      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d101      	bne.n	80037d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037d4:	4b23      	ldr	r3, [pc, #140]	@ (8003864 <HAL_RCC_GetSysClockFreq+0x114>)
 80037d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	2b0c      	cmp	r3, #12
 80037dc:	d134      	bne.n	8003848 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037de:	4b1e      	ldr	r3, [pc, #120]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x108>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d003      	beq.n	80037f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d003      	beq.n	80037fc <HAL_RCC_GetSysClockFreq+0xac>
 80037f4:	e005      	b.n	8003802 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003860 <HAL_RCC_GetSysClockFreq+0x110>)
 80037f8:	617b      	str	r3, [r7, #20]
      break;
 80037fa:	e005      	b.n	8003808 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037fc:	4b19      	ldr	r3, [pc, #100]	@ (8003864 <HAL_RCC_GetSysClockFreq+0x114>)
 80037fe:	617b      	str	r3, [r7, #20]
      break;
 8003800:	e002      	b.n	8003808 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	617b      	str	r3, [r7, #20]
      break;
 8003806:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003808:	4b13      	ldr	r3, [pc, #76]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x108>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	091b      	lsrs	r3, r3, #4
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	3301      	adds	r3, #1
 8003814:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003816:	4b10      	ldr	r3, [pc, #64]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x108>)
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	0a1b      	lsrs	r3, r3, #8
 800381c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	fb03 f202 	mul.w	r2, r3, r2
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	fbb2 f3f3 	udiv	r3, r2, r3
 800382c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800382e:	4b0a      	ldr	r3, [pc, #40]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x108>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	0e5b      	lsrs	r3, r3, #25
 8003834:	f003 0303 	and.w	r3, r3, #3
 8003838:	3301      	adds	r3, #1
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	fbb2 f3f3 	udiv	r3, r2, r3
 8003846:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003848:	69bb      	ldr	r3, [r7, #24]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3724      	adds	r7, #36	@ 0x24
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40021000 	.word	0x40021000
 800385c:	08005030 	.word	0x08005030
 8003860:	00f42400 	.word	0x00f42400
 8003864:	007a1200 	.word	0x007a1200

08003868 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800386c:	4b03      	ldr	r3, [pc, #12]	@ (800387c <HAL_RCC_GetHCLKFreq+0x14>)
 800386e:	681b      	ldr	r3, [r3, #0]
}
 8003870:	4618      	mov	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	20000090 	.word	0x20000090

08003880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003884:	f7ff fff0 	bl	8003868 <HAL_RCC_GetHCLKFreq>
 8003888:	4602      	mov	r2, r0
 800388a:	4b06      	ldr	r3, [pc, #24]	@ (80038a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	0a1b      	lsrs	r3, r3, #8
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	4904      	ldr	r1, [pc, #16]	@ (80038a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003896:	5ccb      	ldrb	r3, [r1, r3]
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40021000 	.word	0x40021000
 80038a8:	08005028 	.word	0x08005028

080038ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038b0:	f7ff ffda 	bl	8003868 <HAL_RCC_GetHCLKFreq>
 80038b4:	4602      	mov	r2, r0
 80038b6:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	0adb      	lsrs	r3, r3, #11
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	4904      	ldr	r1, [pc, #16]	@ (80038d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038c2:	5ccb      	ldrb	r3, [r1, r3]
 80038c4:	f003 031f 	and.w	r3, r3, #31
 80038c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40021000 	.word	0x40021000
 80038d4:	08005028 	.word	0x08005028

080038d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038e0:	2300      	movs	r3, #0
 80038e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038e4:	4b2a      	ldr	r3, [pc, #168]	@ (8003990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038f0:	f7ff f9b6 	bl	8002c60 <HAL_PWREx_GetVoltageRange>
 80038f4:	6178      	str	r0, [r7, #20]
 80038f6:	e014      	b.n	8003922 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038f8:	4b25      	ldr	r3, [pc, #148]	@ (8003990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038fc:	4a24      	ldr	r2, [pc, #144]	@ (8003990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003902:	6593      	str	r3, [r2, #88]	@ 0x58
 8003904:	4b22      	ldr	r3, [pc, #136]	@ (8003990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003910:	f7ff f9a6 	bl	8002c60 <HAL_PWREx_GetVoltageRange>
 8003914:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003916:	4b1e      	ldr	r3, [pc, #120]	@ (8003990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800391a:	4a1d      	ldr	r2, [pc, #116]	@ (8003990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800391c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003920:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003928:	d10b      	bne.n	8003942 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b80      	cmp	r3, #128	@ 0x80
 800392e:	d919      	bls.n	8003964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2ba0      	cmp	r3, #160	@ 0xa0
 8003934:	d902      	bls.n	800393c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003936:	2302      	movs	r3, #2
 8003938:	613b      	str	r3, [r7, #16]
 800393a:	e013      	b.n	8003964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800393c:	2301      	movs	r3, #1
 800393e:	613b      	str	r3, [r7, #16]
 8003940:	e010      	b.n	8003964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b80      	cmp	r3, #128	@ 0x80
 8003946:	d902      	bls.n	800394e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003948:	2303      	movs	r3, #3
 800394a:	613b      	str	r3, [r7, #16]
 800394c:	e00a      	b.n	8003964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b80      	cmp	r3, #128	@ 0x80
 8003952:	d102      	bne.n	800395a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003954:	2302      	movs	r3, #2
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	e004      	b.n	8003964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b70      	cmp	r3, #112	@ 0x70
 800395e:	d101      	bne.n	8003964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003960:	2301      	movs	r3, #1
 8003962:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003964:	4b0b      	ldr	r3, [pc, #44]	@ (8003994 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f023 0207 	bic.w	r2, r3, #7
 800396c:	4909      	ldr	r1, [pc, #36]	@ (8003994 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4313      	orrs	r3, r2
 8003972:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003974:	4b07      	ldr	r3, [pc, #28]	@ (8003994 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	429a      	cmp	r2, r3
 8003980:	d001      	beq.n	8003986 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40021000 	.word	0x40021000
 8003994:	40022000 	.word	0x40022000

08003998 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039a0:	2300      	movs	r3, #0
 80039a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039a4:	2300      	movs	r3, #0
 80039a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d031      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80039bc:	d01a      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80039be:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80039c2:	d814      	bhi.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d009      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039cc:	d10f      	bne.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80039ce:	4b5d      	ldr	r3, [pc, #372]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	4a5c      	ldr	r2, [pc, #368]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039d8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039da:	e00c      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3304      	adds	r3, #4
 80039e0:	2100      	movs	r1, #0
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 f9de 	bl	8003da4 <RCCEx_PLLSAI1_Config>
 80039e8:	4603      	mov	r3, r0
 80039ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039ec:	e003      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	74fb      	strb	r3, [r7, #19]
      break;
 80039f2:	e000      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80039f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039f6:	7cfb      	ldrb	r3, [r7, #19]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10b      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039fc:	4b51      	ldr	r3, [pc, #324]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a02:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a0a:	494e      	ldr	r1, [pc, #312]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003a12:	e001      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a14:	7cfb      	ldrb	r3, [r7, #19]
 8003a16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 809e 	beq.w	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a26:	2300      	movs	r3, #0
 8003a28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a2a:	4b46      	ldr	r3, [pc, #280]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00d      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a40:	4b40      	ldr	r3, [pc, #256]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a44:	4a3f      	ldr	r2, [pc, #252]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a4c:	4b3d      	ldr	r3, [pc, #244]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a5c:	4b3a      	ldr	r3, [pc, #232]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a39      	ldr	r2, [pc, #228]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a68:	f7fe f82e 	bl	8001ac8 <HAL_GetTick>
 8003a6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a6e:	e009      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a70:	f7fe f82a 	bl	8001ac8 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d902      	bls.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	74fb      	strb	r3, [r7, #19]
        break;
 8003a82:	e005      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a84:	4b30      	ldr	r3, [pc, #192]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0ef      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003a90:	7cfb      	ldrb	r3, [r7, #19]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d15a      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a96:	4b2b      	ldr	r3, [pc, #172]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aa0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01e      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d019      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ab2:	4b24      	ldr	r3, [pc, #144]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003abc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003abe:	4b21      	ldr	r3, [pc, #132]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ac4:	4a1f      	ldr	r2, [pc, #124]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ac6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ace:	4b1d      	ldr	r3, [pc, #116]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ada:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ade:	4a19      	ldr	r2, [pc, #100]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d016      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af0:	f7fd ffea 	bl	8001ac8 <HAL_GetTick>
 8003af4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003af6:	e00b      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af8:	f7fd ffe6 	bl	8001ac8 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d902      	bls.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	74fb      	strb	r3, [r7, #19]
            break;
 8003b0e:	e006      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b10:	4b0c      	ldr	r3, [pc, #48]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0ec      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003b1e:	7cfb      	ldrb	r3, [r7, #19]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10b      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b24:	4b07      	ldr	r3, [pc, #28]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b2a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b32:	4904      	ldr	r1, [pc, #16]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b3a:	e009      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b3c:	7cfb      	ldrb	r3, [r7, #19]
 8003b3e:	74bb      	strb	r3, [r7, #18]
 8003b40:	e006      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003b42:	bf00      	nop
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b4c:	7cfb      	ldrb	r3, [r7, #19]
 8003b4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b50:	7c7b      	ldrb	r3, [r7, #17]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d105      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b56:	4b8a      	ldr	r3, [pc, #552]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b5a:	4a89      	ldr	r2, [pc, #548]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b60:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b6e:	4b84      	ldr	r3, [pc, #528]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b74:	f023 0203 	bic.w	r2, r3, #3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	4980      	ldr	r1, [pc, #512]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b90:	4b7b      	ldr	r3, [pc, #492]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b96:	f023 020c 	bic.w	r2, r3, #12
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9e:	4978      	ldr	r1, [pc, #480]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bb2:	4b73      	ldr	r3, [pc, #460]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc0:	496f      	ldr	r1, [pc, #444]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bd4:	4b6a      	ldr	r3, [pc, #424]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bda:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003be2:	4967      	ldr	r1, [pc, #412]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bf6:	4b62      	ldr	r3, [pc, #392]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bfc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c04:	495e      	ldr	r1, [pc, #376]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c18:	4b59      	ldr	r3, [pc, #356]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c1e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c26:	4956      	ldr	r1, [pc, #344]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c3a:	4b51      	ldr	r3, [pc, #324]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c40:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c48:	494d      	ldr	r1, [pc, #308]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d028      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c5c:	4b48      	ldr	r3, [pc, #288]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c62:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6a:	4945      	ldr	r1, [pc, #276]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c7a:	d106      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c7c:	4b40      	ldr	r3, [pc, #256]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	4a3f      	ldr	r2, [pc, #252]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c86:	60d3      	str	r3, [r2, #12]
 8003c88:	e011      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c92:	d10c      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3304      	adds	r3, #4
 8003c98:	2101      	movs	r1, #1
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 f882 	bl	8003da4 <RCCEx_PLLSAI1_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ca4:	7cfb      	ldrb	r3, [r7, #19]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003caa:	7cfb      	ldrb	r3, [r7, #19]
 8003cac:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d028      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cba:	4b31      	ldr	r3, [pc, #196]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc8:	492d      	ldr	r1, [pc, #180]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cd8:	d106      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cda:	4b29      	ldr	r3, [pc, #164]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	4a28      	ldr	r2, [pc, #160]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ce0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ce4:	60d3      	str	r3, [r2, #12]
 8003ce6:	e011      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003cf0:	d10c      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 f853 	bl	8003da4 <RCCEx_PLLSAI1_Config>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d02:	7cfb      	ldrb	r3, [r7, #19]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003d08:	7cfb      	ldrb	r3, [r7, #19]
 8003d0a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d01c      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d18:	4b19      	ldr	r3, [pc, #100]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d1e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d26:	4916      	ldr	r1, [pc, #88]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d36:	d10c      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	2102      	movs	r1, #2
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 f830 	bl	8003da4 <RCCEx_PLLSAI1_Config>
 8003d44:	4603      	mov	r3, r0
 8003d46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d48:	7cfb      	ldrb	r3, [r7, #19]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003d4e:	7cfb      	ldrb	r3, [r7, #19]
 8003d50:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d5e:	4b08      	ldr	r3, [pc, #32]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d64:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d6c:	4904      	ldr	r1, [pc, #16]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d74:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40021000 	.word	0x40021000

08003d84 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003d88:	4b05      	ldr	r3, [pc, #20]	@ (8003da0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a04      	ldr	r2, [pc, #16]	@ (8003da0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003d8e:	f043 0304 	orr.w	r3, r3, #4
 8003d92:	6013      	str	r3, [r2, #0]
}
 8003d94:	bf00      	nop
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40021000 	.word	0x40021000

08003da4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dae:	2300      	movs	r3, #0
 8003db0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003db2:	4b74      	ldr	r3, [pc, #464]	@ (8003f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d018      	beq.n	8003df0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003dbe:	4b71      	ldr	r3, [pc, #452]	@ (8003f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f003 0203 	and.w	r2, r3, #3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d10d      	bne.n	8003dea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
       ||
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d009      	beq.n	8003dea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003dd6:	4b6b      	ldr	r3, [pc, #428]	@ (8003f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	091b      	lsrs	r3, r3, #4
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	1c5a      	adds	r2, r3, #1
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
       ||
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d047      	beq.n	8003e7a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	73fb      	strb	r3, [r7, #15]
 8003dee:	e044      	b.n	8003e7a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	d018      	beq.n	8003e2a <RCCEx_PLLSAI1_Config+0x86>
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d825      	bhi.n	8003e48 <RCCEx_PLLSAI1_Config+0xa4>
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d002      	beq.n	8003e06 <RCCEx_PLLSAI1_Config+0x62>
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d009      	beq.n	8003e18 <RCCEx_PLLSAI1_Config+0x74>
 8003e04:	e020      	b.n	8003e48 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e06:	4b5f      	ldr	r3, [pc, #380]	@ (8003f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d11d      	bne.n	8003e4e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e16:	e01a      	b.n	8003e4e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e18:	4b5a      	ldr	r3, [pc, #360]	@ (8003f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d116      	bne.n	8003e52 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e28:	e013      	b.n	8003e52 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e2a:	4b56      	ldr	r3, [pc, #344]	@ (8003f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10f      	bne.n	8003e56 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e36:	4b53      	ldr	r3, [pc, #332]	@ (8003f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d109      	bne.n	8003e56 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e46:	e006      	b.n	8003e56 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e4c:	e004      	b.n	8003e58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e4e:	bf00      	nop
 8003e50:	e002      	b.n	8003e58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e52:	bf00      	nop
 8003e54:	e000      	b.n	8003e58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e56:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10d      	bne.n	8003e7a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e5e:	4b49      	ldr	r3, [pc, #292]	@ (8003f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6819      	ldr	r1, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	430b      	orrs	r3, r1
 8003e74:	4943      	ldr	r1, [pc, #268]	@ (8003f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d17c      	bne.n	8003f7a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e80:	4b40      	ldr	r3, [pc, #256]	@ (8003f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a3f      	ldr	r2, [pc, #252]	@ (8003f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e8c:	f7fd fe1c 	bl	8001ac8 <HAL_GetTick>
 8003e90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e92:	e009      	b.n	8003ea8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e94:	f7fd fe18 	bl	8001ac8 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d902      	bls.n	8003ea8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	73fb      	strb	r3, [r7, #15]
        break;
 8003ea6:	e005      	b.n	8003eb4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ea8:	4b36      	ldr	r3, [pc, #216]	@ (8003f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1ef      	bne.n	8003e94 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d15f      	bne.n	8003f7a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d110      	bne.n	8003ee2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ec0:	4b30      	ldr	r3, [pc, #192]	@ (8003f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003ec8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6892      	ldr	r2, [r2, #8]
 8003ed0:	0211      	lsls	r1, r2, #8
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	68d2      	ldr	r2, [r2, #12]
 8003ed6:	06d2      	lsls	r2, r2, #27
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	492a      	ldr	r1, [pc, #168]	@ (8003f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	610b      	str	r3, [r1, #16]
 8003ee0:	e027      	b.n	8003f32 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d112      	bne.n	8003f0e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ee8:	4b26      	ldr	r3, [pc, #152]	@ (8003f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003ef0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6892      	ldr	r2, [r2, #8]
 8003ef8:	0211      	lsls	r1, r2, #8
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6912      	ldr	r2, [r2, #16]
 8003efe:	0852      	lsrs	r2, r2, #1
 8003f00:	3a01      	subs	r2, #1
 8003f02:	0552      	lsls	r2, r2, #21
 8003f04:	430a      	orrs	r2, r1
 8003f06:	491f      	ldr	r1, [pc, #124]	@ (8003f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	610b      	str	r3, [r1, #16]
 8003f0c:	e011      	b.n	8003f32 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8003f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003f16:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6892      	ldr	r2, [r2, #8]
 8003f1e:	0211      	lsls	r1, r2, #8
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6952      	ldr	r2, [r2, #20]
 8003f24:	0852      	lsrs	r2, r2, #1
 8003f26:	3a01      	subs	r2, #1
 8003f28:	0652      	lsls	r2, r2, #25
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	4915      	ldr	r1, [pc, #84]	@ (8003f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f32:	4b14      	ldr	r3, [pc, #80]	@ (8003f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a13      	ldr	r2, [pc, #76]	@ (8003f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f38:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f3c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3e:	f7fd fdc3 	bl	8001ac8 <HAL_GetTick>
 8003f42:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f44:	e009      	b.n	8003f5a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f46:	f7fd fdbf 	bl	8001ac8 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d902      	bls.n	8003f5a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	73fb      	strb	r3, [r7, #15]
          break;
 8003f58:	e005      	b.n	8003f66 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0ef      	beq.n	8003f46 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d106      	bne.n	8003f7a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f6c:	4b05      	ldr	r3, [pc, #20]	@ (8003f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	4903      	ldr	r1, [pc, #12]	@ (8003f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40021000 	.word	0x40021000

08003f88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e040      	b.n	800401c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d106      	bne.n	8003fb0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fd fc90 	bl	80018d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2224      	movs	r2, #36	@ 0x24
 8003fb4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0201 	bic.w	r2, r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 fa54 	bl	800447c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f825 	bl	8004024 <UART_SetConfig>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e01b      	b.n	800401c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ff2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004002:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0201 	orr.w	r2, r2, #1
 8004012:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 fad3 	bl	80045c0 <UART_CheckIdleState>
 800401a:	4603      	mov	r3, r0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004028:	b08a      	sub	sp, #40	@ 0x28
 800402a:	af00      	add	r7, sp, #0
 800402c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800402e:	2300      	movs	r3, #0
 8004030:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	431a      	orrs	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	431a      	orrs	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	4313      	orrs	r3, r2
 800404a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	4bb4      	ldr	r3, [pc, #720]	@ (8004324 <UART_SetConfig+0x300>)
 8004054:	4013      	ands	r3, r2
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	6812      	ldr	r2, [r2, #0]
 800405a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800405c:	430b      	orrs	r3, r1
 800405e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4aa9      	ldr	r2, [pc, #676]	@ (8004328 <UART_SetConfig+0x304>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d004      	beq.n	8004090 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800408c:	4313      	orrs	r3, r2
 800408e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040a0:	430a      	orrs	r2, r1
 80040a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4aa0      	ldr	r2, [pc, #640]	@ (800432c <UART_SetConfig+0x308>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d126      	bne.n	80040fc <UART_SetConfig+0xd8>
 80040ae:	4ba0      	ldr	r3, [pc, #640]	@ (8004330 <UART_SetConfig+0x30c>)
 80040b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b4:	f003 0303 	and.w	r3, r3, #3
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d81b      	bhi.n	80040f4 <UART_SetConfig+0xd0>
 80040bc:	a201      	add	r2, pc, #4	@ (adr r2, 80040c4 <UART_SetConfig+0xa0>)
 80040be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c2:	bf00      	nop
 80040c4:	080040d5 	.word	0x080040d5
 80040c8:	080040e5 	.word	0x080040e5
 80040cc:	080040dd 	.word	0x080040dd
 80040d0:	080040ed 	.word	0x080040ed
 80040d4:	2301      	movs	r3, #1
 80040d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040da:	e080      	b.n	80041de <UART_SetConfig+0x1ba>
 80040dc:	2302      	movs	r3, #2
 80040de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040e2:	e07c      	b.n	80041de <UART_SetConfig+0x1ba>
 80040e4:	2304      	movs	r3, #4
 80040e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ea:	e078      	b.n	80041de <UART_SetConfig+0x1ba>
 80040ec:	2308      	movs	r3, #8
 80040ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040f2:	e074      	b.n	80041de <UART_SetConfig+0x1ba>
 80040f4:	2310      	movs	r3, #16
 80040f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040fa:	e070      	b.n	80041de <UART_SetConfig+0x1ba>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a8c      	ldr	r2, [pc, #560]	@ (8004334 <UART_SetConfig+0x310>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d138      	bne.n	8004178 <UART_SetConfig+0x154>
 8004106:	4b8a      	ldr	r3, [pc, #552]	@ (8004330 <UART_SetConfig+0x30c>)
 8004108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410c:	f003 030c 	and.w	r3, r3, #12
 8004110:	2b0c      	cmp	r3, #12
 8004112:	d82d      	bhi.n	8004170 <UART_SetConfig+0x14c>
 8004114:	a201      	add	r2, pc, #4	@ (adr r2, 800411c <UART_SetConfig+0xf8>)
 8004116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411a:	bf00      	nop
 800411c:	08004151 	.word	0x08004151
 8004120:	08004171 	.word	0x08004171
 8004124:	08004171 	.word	0x08004171
 8004128:	08004171 	.word	0x08004171
 800412c:	08004161 	.word	0x08004161
 8004130:	08004171 	.word	0x08004171
 8004134:	08004171 	.word	0x08004171
 8004138:	08004171 	.word	0x08004171
 800413c:	08004159 	.word	0x08004159
 8004140:	08004171 	.word	0x08004171
 8004144:	08004171 	.word	0x08004171
 8004148:	08004171 	.word	0x08004171
 800414c:	08004169 	.word	0x08004169
 8004150:	2300      	movs	r3, #0
 8004152:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004156:	e042      	b.n	80041de <UART_SetConfig+0x1ba>
 8004158:	2302      	movs	r3, #2
 800415a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800415e:	e03e      	b.n	80041de <UART_SetConfig+0x1ba>
 8004160:	2304      	movs	r3, #4
 8004162:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004166:	e03a      	b.n	80041de <UART_SetConfig+0x1ba>
 8004168:	2308      	movs	r3, #8
 800416a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800416e:	e036      	b.n	80041de <UART_SetConfig+0x1ba>
 8004170:	2310      	movs	r3, #16
 8004172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004176:	e032      	b.n	80041de <UART_SetConfig+0x1ba>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a6a      	ldr	r2, [pc, #424]	@ (8004328 <UART_SetConfig+0x304>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d12a      	bne.n	80041d8 <UART_SetConfig+0x1b4>
 8004182:	4b6b      	ldr	r3, [pc, #428]	@ (8004330 <UART_SetConfig+0x30c>)
 8004184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004188:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800418c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004190:	d01a      	beq.n	80041c8 <UART_SetConfig+0x1a4>
 8004192:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004196:	d81b      	bhi.n	80041d0 <UART_SetConfig+0x1ac>
 8004198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800419c:	d00c      	beq.n	80041b8 <UART_SetConfig+0x194>
 800419e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041a2:	d815      	bhi.n	80041d0 <UART_SetConfig+0x1ac>
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d003      	beq.n	80041b0 <UART_SetConfig+0x18c>
 80041a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ac:	d008      	beq.n	80041c0 <UART_SetConfig+0x19c>
 80041ae:	e00f      	b.n	80041d0 <UART_SetConfig+0x1ac>
 80041b0:	2300      	movs	r3, #0
 80041b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041b6:	e012      	b.n	80041de <UART_SetConfig+0x1ba>
 80041b8:	2302      	movs	r3, #2
 80041ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041be:	e00e      	b.n	80041de <UART_SetConfig+0x1ba>
 80041c0:	2304      	movs	r3, #4
 80041c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041c6:	e00a      	b.n	80041de <UART_SetConfig+0x1ba>
 80041c8:	2308      	movs	r3, #8
 80041ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041ce:	e006      	b.n	80041de <UART_SetConfig+0x1ba>
 80041d0:	2310      	movs	r3, #16
 80041d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041d6:	e002      	b.n	80041de <UART_SetConfig+0x1ba>
 80041d8:	2310      	movs	r3, #16
 80041da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a51      	ldr	r2, [pc, #324]	@ (8004328 <UART_SetConfig+0x304>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d17a      	bne.n	80042de <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d824      	bhi.n	800423a <UART_SetConfig+0x216>
 80041f0:	a201      	add	r2, pc, #4	@ (adr r2, 80041f8 <UART_SetConfig+0x1d4>)
 80041f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f6:	bf00      	nop
 80041f8:	0800421d 	.word	0x0800421d
 80041fc:	0800423b 	.word	0x0800423b
 8004200:	08004225 	.word	0x08004225
 8004204:	0800423b 	.word	0x0800423b
 8004208:	0800422b 	.word	0x0800422b
 800420c:	0800423b 	.word	0x0800423b
 8004210:	0800423b 	.word	0x0800423b
 8004214:	0800423b 	.word	0x0800423b
 8004218:	08004233 	.word	0x08004233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800421c:	f7ff fb30 	bl	8003880 <HAL_RCC_GetPCLK1Freq>
 8004220:	61f8      	str	r0, [r7, #28]
        break;
 8004222:	e010      	b.n	8004246 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004224:	4b44      	ldr	r3, [pc, #272]	@ (8004338 <UART_SetConfig+0x314>)
 8004226:	61fb      	str	r3, [r7, #28]
        break;
 8004228:	e00d      	b.n	8004246 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800422a:	f7ff fa91 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 800422e:	61f8      	str	r0, [r7, #28]
        break;
 8004230:	e009      	b.n	8004246 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004236:	61fb      	str	r3, [r7, #28]
        break;
 8004238:	e005      	b.n	8004246 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800423a:	2300      	movs	r3, #0
 800423c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004244:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 8107 	beq.w	800445c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	4613      	mov	r3, r2
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	4413      	add	r3, r2
 8004258:	69fa      	ldr	r2, [r7, #28]
 800425a:	429a      	cmp	r2, r3
 800425c:	d305      	bcc.n	800426a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004264:	69fa      	ldr	r2, [r7, #28]
 8004266:	429a      	cmp	r2, r3
 8004268:	d903      	bls.n	8004272 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004270:	e0f4      	b.n	800445c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	2200      	movs	r2, #0
 8004276:	461c      	mov	r4, r3
 8004278:	4615      	mov	r5, r2
 800427a:	f04f 0200 	mov.w	r2, #0
 800427e:	f04f 0300 	mov.w	r3, #0
 8004282:	022b      	lsls	r3, r5, #8
 8004284:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004288:	0222      	lsls	r2, r4, #8
 800428a:	68f9      	ldr	r1, [r7, #12]
 800428c:	6849      	ldr	r1, [r1, #4]
 800428e:	0849      	lsrs	r1, r1, #1
 8004290:	2000      	movs	r0, #0
 8004292:	4688      	mov	r8, r1
 8004294:	4681      	mov	r9, r0
 8004296:	eb12 0a08 	adds.w	sl, r2, r8
 800429a:	eb43 0b09 	adc.w	fp, r3, r9
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	603b      	str	r3, [r7, #0]
 80042a6:	607a      	str	r2, [r7, #4]
 80042a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042ac:	4650      	mov	r0, sl
 80042ae:	4659      	mov	r1, fp
 80042b0:	f7fc fbfa 	bl	8000aa8 <__aeabi_uldivmod>
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4613      	mov	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042c2:	d308      	bcc.n	80042d6 <UART_SetConfig+0x2b2>
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042ca:	d204      	bcs.n	80042d6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	60da      	str	r2, [r3, #12]
 80042d4:	e0c2      	b.n	800445c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80042dc:	e0be      	b.n	800445c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042e6:	d16a      	bne.n	80043be <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80042e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d834      	bhi.n	800435a <UART_SetConfig+0x336>
 80042f0:	a201      	add	r2, pc, #4	@ (adr r2, 80042f8 <UART_SetConfig+0x2d4>)
 80042f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f6:	bf00      	nop
 80042f8:	0800431d 	.word	0x0800431d
 80042fc:	0800433d 	.word	0x0800433d
 8004300:	08004345 	.word	0x08004345
 8004304:	0800435b 	.word	0x0800435b
 8004308:	0800434b 	.word	0x0800434b
 800430c:	0800435b 	.word	0x0800435b
 8004310:	0800435b 	.word	0x0800435b
 8004314:	0800435b 	.word	0x0800435b
 8004318:	08004353 	.word	0x08004353
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800431c:	f7ff fab0 	bl	8003880 <HAL_RCC_GetPCLK1Freq>
 8004320:	61f8      	str	r0, [r7, #28]
        break;
 8004322:	e020      	b.n	8004366 <UART_SetConfig+0x342>
 8004324:	efff69f3 	.word	0xefff69f3
 8004328:	40008000 	.word	0x40008000
 800432c:	40013800 	.word	0x40013800
 8004330:	40021000 	.word	0x40021000
 8004334:	40004400 	.word	0x40004400
 8004338:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800433c:	f7ff fab6 	bl	80038ac <HAL_RCC_GetPCLK2Freq>
 8004340:	61f8      	str	r0, [r7, #28]
        break;
 8004342:	e010      	b.n	8004366 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004344:	4b4c      	ldr	r3, [pc, #304]	@ (8004478 <UART_SetConfig+0x454>)
 8004346:	61fb      	str	r3, [r7, #28]
        break;
 8004348:	e00d      	b.n	8004366 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800434a:	f7ff fa01 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 800434e:	61f8      	str	r0, [r7, #28]
        break;
 8004350:	e009      	b.n	8004366 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004352:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004356:	61fb      	str	r3, [r7, #28]
        break;
 8004358:	e005      	b.n	8004366 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800435a:	2300      	movs	r3, #0
 800435c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004364:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d077      	beq.n	800445c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	005a      	lsls	r2, r3, #1
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	085b      	lsrs	r3, r3, #1
 8004376:	441a      	add	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004380:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	2b0f      	cmp	r3, #15
 8004386:	d916      	bls.n	80043b6 <UART_SetConfig+0x392>
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800438e:	d212      	bcs.n	80043b6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	b29b      	uxth	r3, r3
 8004394:	f023 030f 	bic.w	r3, r3, #15
 8004398:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	085b      	lsrs	r3, r3, #1
 800439e:	b29b      	uxth	r3, r3
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	8afb      	ldrh	r3, [r7, #22]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	8afa      	ldrh	r2, [r7, #22]
 80043b2:	60da      	str	r2, [r3, #12]
 80043b4:	e052      	b.n	800445c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80043bc:	e04e      	b.n	800445c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80043c2:	2b08      	cmp	r3, #8
 80043c4:	d827      	bhi.n	8004416 <UART_SetConfig+0x3f2>
 80043c6:	a201      	add	r2, pc, #4	@ (adr r2, 80043cc <UART_SetConfig+0x3a8>)
 80043c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043cc:	080043f1 	.word	0x080043f1
 80043d0:	080043f9 	.word	0x080043f9
 80043d4:	08004401 	.word	0x08004401
 80043d8:	08004417 	.word	0x08004417
 80043dc:	08004407 	.word	0x08004407
 80043e0:	08004417 	.word	0x08004417
 80043e4:	08004417 	.word	0x08004417
 80043e8:	08004417 	.word	0x08004417
 80043ec:	0800440f 	.word	0x0800440f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043f0:	f7ff fa46 	bl	8003880 <HAL_RCC_GetPCLK1Freq>
 80043f4:	61f8      	str	r0, [r7, #28]
        break;
 80043f6:	e014      	b.n	8004422 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043f8:	f7ff fa58 	bl	80038ac <HAL_RCC_GetPCLK2Freq>
 80043fc:	61f8      	str	r0, [r7, #28]
        break;
 80043fe:	e010      	b.n	8004422 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004400:	4b1d      	ldr	r3, [pc, #116]	@ (8004478 <UART_SetConfig+0x454>)
 8004402:	61fb      	str	r3, [r7, #28]
        break;
 8004404:	e00d      	b.n	8004422 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004406:	f7ff f9a3 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 800440a:	61f8      	str	r0, [r7, #28]
        break;
 800440c:	e009      	b.n	8004422 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800440e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004412:	61fb      	str	r3, [r7, #28]
        break;
 8004414:	e005      	b.n	8004422 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004420:	bf00      	nop
    }

    if (pclk != 0U)
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d019      	beq.n	800445c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	085a      	lsrs	r2, r3, #1
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	441a      	add	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	fbb2 f3f3 	udiv	r3, r2, r3
 800443a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	2b0f      	cmp	r3, #15
 8004440:	d909      	bls.n	8004456 <UART_SetConfig+0x432>
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004448:	d205      	bcs.n	8004456 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	b29a      	uxth	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	60da      	str	r2, [r3, #12]
 8004454:	e002      	b.n	800445c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004468:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800446c:	4618      	mov	r0, r3
 800446e:	3728      	adds	r7, #40	@ 0x28
 8004470:	46bd      	mov	sp, r7
 8004472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004476:	bf00      	nop
 8004478:	00f42400 	.word	0x00f42400

0800447c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004488:	f003 0308 	and.w	r3, r3, #8
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00a      	beq.n	80044a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00a      	beq.n	80044ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ee:	f003 0304 	and.w	r3, r3, #4
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004510:	f003 0310 	and.w	r3, r3, #16
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00a      	beq.n	800452e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01a      	beq.n	8004592 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004576:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800457a:	d10a      	bne.n	8004592 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	605a      	str	r2, [r3, #4]
  }
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b098      	sub	sp, #96	@ 0x60
 80045c4:	af02      	add	r7, sp, #8
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045d0:	f7fd fa7a 	bl	8001ac8 <HAL_GetTick>
 80045d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d12e      	bne.n	8004642 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045ec:	2200      	movs	r2, #0
 80045ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f88c 	bl	8004710 <UART_WaitOnFlagUntilTimeout>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d021      	beq.n	8004642 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800460c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800460e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004612:	653b      	str	r3, [r7, #80]	@ 0x50
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	461a      	mov	r2, r3
 800461a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800461c:	647b      	str	r3, [r7, #68]	@ 0x44
 800461e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004620:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004622:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004624:	e841 2300 	strex	r3, r2, [r1]
 8004628:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800462a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e6      	bne.n	80045fe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2220      	movs	r2, #32
 8004634:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e062      	b.n	8004708 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b04      	cmp	r3, #4
 800464e:	d149      	bne.n	80046e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004650:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004658:	2200      	movs	r2, #0
 800465a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f856 	bl	8004710 <UART_WaitOnFlagUntilTimeout>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d03c      	beq.n	80046e4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	623b      	str	r3, [r7, #32]
   return(result);
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800467e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004688:	633b      	str	r3, [r7, #48]	@ 0x30
 800468a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800468e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004690:	e841 2300 	strex	r3, r2, [r1]
 8004694:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e6      	bne.n	800466a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3308      	adds	r3, #8
 80046a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	e853 3f00 	ldrex	r3, [r3]
 80046aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0301 	bic.w	r3, r3, #1
 80046b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3308      	adds	r3, #8
 80046ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046bc:	61fa      	str	r2, [r7, #28]
 80046be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c0:	69b9      	ldr	r1, [r7, #24]
 80046c2:	69fa      	ldr	r2, [r7, #28]
 80046c4:	e841 2300 	strex	r3, r2, [r1]
 80046c8:	617b      	str	r3, [r7, #20]
   return(result);
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e5      	bne.n	800469c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e011      	b.n	8004708 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2220      	movs	r2, #32
 80046e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3758      	adds	r7, #88	@ 0x58
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	4613      	mov	r3, r2
 800471e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004720:	e04f      	b.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004728:	d04b      	beq.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800472a:	f7fd f9cd 	bl	8001ac8 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	429a      	cmp	r2, r3
 8004738:	d302      	bcc.n	8004740 <UART_WaitOnFlagUntilTimeout+0x30>
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e04e      	b.n	80047e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0304 	and.w	r3, r3, #4
 800474e:	2b00      	cmp	r3, #0
 8004750:	d037      	beq.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b80      	cmp	r3, #128	@ 0x80
 8004756:	d034      	beq.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2b40      	cmp	r3, #64	@ 0x40
 800475c:	d031      	beq.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b08      	cmp	r3, #8
 800476a:	d110      	bne.n	800478e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2208      	movs	r2, #8
 8004772:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f838 	bl	80047ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2208      	movs	r2, #8
 800477e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e029      	b.n	80047e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004798:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800479c:	d111      	bne.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 f81e 	bl	80047ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e00f      	b.n	80047e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69da      	ldr	r2, [r3, #28]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	4013      	ands	r3, r2
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	bf0c      	ite	eq
 80047d2:	2301      	moveq	r3, #1
 80047d4:	2300      	movne	r3, #0
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	461a      	mov	r2, r3
 80047da:	79fb      	ldrb	r3, [r7, #7]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d0a0      	beq.n	8004722 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b095      	sub	sp, #84	@ 0x54
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047fa:	e853 3f00 	ldrex	r3, [r3]
 80047fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004802:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	461a      	mov	r2, r3
 800480e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004810:	643b      	str	r3, [r7, #64]	@ 0x40
 8004812:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004814:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004816:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004818:	e841 2300 	strex	r3, r2, [r1]
 800481c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800481e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1e6      	bne.n	80047f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3308      	adds	r3, #8
 800482a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	e853 3f00 	ldrex	r3, [r3]
 8004832:	61fb      	str	r3, [r7, #28]
   return(result);
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	f023 0301 	bic.w	r3, r3, #1
 800483a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	3308      	adds	r3, #8
 8004842:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004844:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004846:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004848:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800484a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800484c:	e841 2300 	strex	r3, r2, [r1]
 8004850:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1e5      	bne.n	8004824 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800485c:	2b01      	cmp	r3, #1
 800485e:	d118      	bne.n	8004892 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	e853 3f00 	ldrex	r3, [r3]
 800486c:	60bb      	str	r3, [r7, #8]
   return(result);
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f023 0310 	bic.w	r3, r3, #16
 8004874:	647b      	str	r3, [r7, #68]	@ 0x44
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800487e:	61bb      	str	r3, [r7, #24]
 8004880:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004882:	6979      	ldr	r1, [r7, #20]
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	e841 2300 	strex	r3, r2, [r1]
 800488a:	613b      	str	r3, [r7, #16]
   return(result);
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1e6      	bne.n	8004860 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2220      	movs	r2, #32
 8004896:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80048a6:	bf00      	nop
 80048a8:	3754      	adds	r7, #84	@ 0x54
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <memset>:
 80048b2:	4402      	add	r2, r0
 80048b4:	4603      	mov	r3, r0
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d100      	bne.n	80048bc <memset+0xa>
 80048ba:	4770      	bx	lr
 80048bc:	f803 1b01 	strb.w	r1, [r3], #1
 80048c0:	e7f9      	b.n	80048b6 <memset+0x4>
	...

080048c4 <__errno>:
 80048c4:	4b01      	ldr	r3, [pc, #4]	@ (80048cc <__errno+0x8>)
 80048c6:	6818      	ldr	r0, [r3, #0]
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	2000009c 	.word	0x2000009c

080048d0 <__libc_init_array>:
 80048d0:	b570      	push	{r4, r5, r6, lr}
 80048d2:	4d0d      	ldr	r5, [pc, #52]	@ (8004908 <__libc_init_array+0x38>)
 80048d4:	4c0d      	ldr	r4, [pc, #52]	@ (800490c <__libc_init_array+0x3c>)
 80048d6:	1b64      	subs	r4, r4, r5
 80048d8:	10a4      	asrs	r4, r4, #2
 80048da:	2600      	movs	r6, #0
 80048dc:	42a6      	cmp	r6, r4
 80048de:	d109      	bne.n	80048f4 <__libc_init_array+0x24>
 80048e0:	4d0b      	ldr	r5, [pc, #44]	@ (8004910 <__libc_init_array+0x40>)
 80048e2:	4c0c      	ldr	r4, [pc, #48]	@ (8004914 <__libc_init_array+0x44>)
 80048e4:	f000 fb8a 	bl	8004ffc <_init>
 80048e8:	1b64      	subs	r4, r4, r5
 80048ea:	10a4      	asrs	r4, r4, #2
 80048ec:	2600      	movs	r6, #0
 80048ee:	42a6      	cmp	r6, r4
 80048f0:	d105      	bne.n	80048fe <__libc_init_array+0x2e>
 80048f2:	bd70      	pop	{r4, r5, r6, pc}
 80048f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048f8:	4798      	blx	r3
 80048fa:	3601      	adds	r6, #1
 80048fc:	e7ee      	b.n	80048dc <__libc_init_array+0xc>
 80048fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004902:	4798      	blx	r3
 8004904:	3601      	adds	r6, #1
 8004906:	e7f2      	b.n	80048ee <__libc_init_array+0x1e>
 8004908:	080050d8 	.word	0x080050d8
 800490c:	080050d8 	.word	0x080050d8
 8004910:	080050d8 	.word	0x080050d8
 8004914:	080050dc 	.word	0x080050dc

08004918 <atan2>:
 8004918:	f000 baaa 	b.w	8004e70 <__ieee754_atan2>

0800491c <sqrt>:
 800491c:	b538      	push	{r3, r4, r5, lr}
 800491e:	ed2d 8b02 	vpush	{d8}
 8004922:	ec55 4b10 	vmov	r4, r5, d0
 8004926:	f000 f9c7 	bl	8004cb8 <__ieee754_sqrt>
 800492a:	4622      	mov	r2, r4
 800492c:	462b      	mov	r3, r5
 800492e:	4620      	mov	r0, r4
 8004930:	4629      	mov	r1, r5
 8004932:	eeb0 8a40 	vmov.f32	s16, s0
 8004936:	eef0 8a60 	vmov.f32	s17, s1
 800493a:	f7fc f89f 	bl	8000a7c <__aeabi_dcmpun>
 800493e:	b990      	cbnz	r0, 8004966 <sqrt+0x4a>
 8004940:	2200      	movs	r2, #0
 8004942:	2300      	movs	r3, #0
 8004944:	4620      	mov	r0, r4
 8004946:	4629      	mov	r1, r5
 8004948:	f7fc f870 	bl	8000a2c <__aeabi_dcmplt>
 800494c:	b158      	cbz	r0, 8004966 <sqrt+0x4a>
 800494e:	f7ff ffb9 	bl	80048c4 <__errno>
 8004952:	2321      	movs	r3, #33	@ 0x21
 8004954:	6003      	str	r3, [r0, #0]
 8004956:	2200      	movs	r2, #0
 8004958:	2300      	movs	r3, #0
 800495a:	4610      	mov	r0, r2
 800495c:	4619      	mov	r1, r3
 800495e:	f7fb ff1d 	bl	800079c <__aeabi_ddiv>
 8004962:	ec41 0b18 	vmov	d8, r0, r1
 8004966:	eeb0 0a48 	vmov.f32	s0, s16
 800496a:	eef0 0a68 	vmov.f32	s1, s17
 800496e:	ecbd 8b02 	vpop	{d8}
 8004972:	bd38      	pop	{r3, r4, r5, pc}
 8004974:	0000      	movs	r0, r0
	...

08004978 <atan>:
 8004978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800497c:	ec55 4b10 	vmov	r4, r5, d0
 8004980:	4bbf      	ldr	r3, [pc, #764]	@ (8004c80 <atan+0x308>)
 8004982:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8004986:	429e      	cmp	r6, r3
 8004988:	46ab      	mov	fp, r5
 800498a:	d918      	bls.n	80049be <atan+0x46>
 800498c:	4bbd      	ldr	r3, [pc, #756]	@ (8004c84 <atan+0x30c>)
 800498e:	429e      	cmp	r6, r3
 8004990:	d801      	bhi.n	8004996 <atan+0x1e>
 8004992:	d109      	bne.n	80049a8 <atan+0x30>
 8004994:	b144      	cbz	r4, 80049a8 <atan+0x30>
 8004996:	4622      	mov	r2, r4
 8004998:	462b      	mov	r3, r5
 800499a:	4620      	mov	r0, r4
 800499c:	4629      	mov	r1, r5
 800499e:	f7fb fc1d 	bl	80001dc <__adddf3>
 80049a2:	4604      	mov	r4, r0
 80049a4:	460d      	mov	r5, r1
 80049a6:	e006      	b.n	80049b6 <atan+0x3e>
 80049a8:	f1bb 0f00 	cmp.w	fp, #0
 80049ac:	f340 812b 	ble.w	8004c06 <atan+0x28e>
 80049b0:	a597      	add	r5, pc, #604	@ (adr r5, 8004c10 <atan+0x298>)
 80049b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80049b6:	ec45 4b10 	vmov	d0, r4, r5
 80049ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049be:	4bb2      	ldr	r3, [pc, #712]	@ (8004c88 <atan+0x310>)
 80049c0:	429e      	cmp	r6, r3
 80049c2:	d813      	bhi.n	80049ec <atan+0x74>
 80049c4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80049c8:	429e      	cmp	r6, r3
 80049ca:	d80c      	bhi.n	80049e6 <atan+0x6e>
 80049cc:	a392      	add	r3, pc, #584	@ (adr r3, 8004c18 <atan+0x2a0>)
 80049ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d2:	4620      	mov	r0, r4
 80049d4:	4629      	mov	r1, r5
 80049d6:	f7fb fc01 	bl	80001dc <__adddf3>
 80049da:	4bac      	ldr	r3, [pc, #688]	@ (8004c8c <atan+0x314>)
 80049dc:	2200      	movs	r2, #0
 80049de:	f7fc f843 	bl	8000a68 <__aeabi_dcmpgt>
 80049e2:	2800      	cmp	r0, #0
 80049e4:	d1e7      	bne.n	80049b6 <atan+0x3e>
 80049e6:	f04f 3aff 	mov.w	sl, #4294967295
 80049ea:	e029      	b.n	8004a40 <atan+0xc8>
 80049ec:	f000 f95c 	bl	8004ca8 <fabs>
 80049f0:	4ba7      	ldr	r3, [pc, #668]	@ (8004c90 <atan+0x318>)
 80049f2:	429e      	cmp	r6, r3
 80049f4:	ec55 4b10 	vmov	r4, r5, d0
 80049f8:	f200 80bc 	bhi.w	8004b74 <atan+0x1fc>
 80049fc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8004a00:	429e      	cmp	r6, r3
 8004a02:	f200 809e 	bhi.w	8004b42 <atan+0x1ca>
 8004a06:	4622      	mov	r2, r4
 8004a08:	462b      	mov	r3, r5
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	f7fb fbe5 	bl	80001dc <__adddf3>
 8004a12:	4b9e      	ldr	r3, [pc, #632]	@ (8004c8c <atan+0x314>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	f7fb fbdf 	bl	80001d8 <__aeabi_dsub>
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	4606      	mov	r6, r0
 8004a1e:	460f      	mov	r7, r1
 8004a20:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004a24:	4620      	mov	r0, r4
 8004a26:	4629      	mov	r1, r5
 8004a28:	f7fb fbd8 	bl	80001dc <__adddf3>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	4630      	mov	r0, r6
 8004a32:	4639      	mov	r1, r7
 8004a34:	f7fb feb2 	bl	800079c <__aeabi_ddiv>
 8004a38:	f04f 0a00 	mov.w	sl, #0
 8004a3c:	4604      	mov	r4, r0
 8004a3e:	460d      	mov	r5, r1
 8004a40:	4622      	mov	r2, r4
 8004a42:	462b      	mov	r3, r5
 8004a44:	4620      	mov	r0, r4
 8004a46:	4629      	mov	r1, r5
 8004a48:	f7fb fd7e 	bl	8000548 <__aeabi_dmul>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4680      	mov	r8, r0
 8004a52:	4689      	mov	r9, r1
 8004a54:	f7fb fd78 	bl	8000548 <__aeabi_dmul>
 8004a58:	a371      	add	r3, pc, #452	@ (adr r3, 8004c20 <atan+0x2a8>)
 8004a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5e:	4606      	mov	r6, r0
 8004a60:	460f      	mov	r7, r1
 8004a62:	f7fb fd71 	bl	8000548 <__aeabi_dmul>
 8004a66:	a370      	add	r3, pc, #448	@ (adr r3, 8004c28 <atan+0x2b0>)
 8004a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6c:	f7fb fbb6 	bl	80001dc <__adddf3>
 8004a70:	4632      	mov	r2, r6
 8004a72:	463b      	mov	r3, r7
 8004a74:	f7fb fd68 	bl	8000548 <__aeabi_dmul>
 8004a78:	a36d      	add	r3, pc, #436	@ (adr r3, 8004c30 <atan+0x2b8>)
 8004a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7e:	f7fb fbad 	bl	80001dc <__adddf3>
 8004a82:	4632      	mov	r2, r6
 8004a84:	463b      	mov	r3, r7
 8004a86:	f7fb fd5f 	bl	8000548 <__aeabi_dmul>
 8004a8a:	a36b      	add	r3, pc, #428	@ (adr r3, 8004c38 <atan+0x2c0>)
 8004a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a90:	f7fb fba4 	bl	80001dc <__adddf3>
 8004a94:	4632      	mov	r2, r6
 8004a96:	463b      	mov	r3, r7
 8004a98:	f7fb fd56 	bl	8000548 <__aeabi_dmul>
 8004a9c:	a368      	add	r3, pc, #416	@ (adr r3, 8004c40 <atan+0x2c8>)
 8004a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa2:	f7fb fb9b 	bl	80001dc <__adddf3>
 8004aa6:	4632      	mov	r2, r6
 8004aa8:	463b      	mov	r3, r7
 8004aaa:	f7fb fd4d 	bl	8000548 <__aeabi_dmul>
 8004aae:	a366      	add	r3, pc, #408	@ (adr r3, 8004c48 <atan+0x2d0>)
 8004ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab4:	f7fb fb92 	bl	80001dc <__adddf3>
 8004ab8:	4642      	mov	r2, r8
 8004aba:	464b      	mov	r3, r9
 8004abc:	f7fb fd44 	bl	8000548 <__aeabi_dmul>
 8004ac0:	a363      	add	r3, pc, #396	@ (adr r3, 8004c50 <atan+0x2d8>)
 8004ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac6:	4680      	mov	r8, r0
 8004ac8:	4689      	mov	r9, r1
 8004aca:	4630      	mov	r0, r6
 8004acc:	4639      	mov	r1, r7
 8004ace:	f7fb fd3b 	bl	8000548 <__aeabi_dmul>
 8004ad2:	a361      	add	r3, pc, #388	@ (adr r3, 8004c58 <atan+0x2e0>)
 8004ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad8:	f7fb fb7e 	bl	80001d8 <__aeabi_dsub>
 8004adc:	4632      	mov	r2, r6
 8004ade:	463b      	mov	r3, r7
 8004ae0:	f7fb fd32 	bl	8000548 <__aeabi_dmul>
 8004ae4:	a35e      	add	r3, pc, #376	@ (adr r3, 8004c60 <atan+0x2e8>)
 8004ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aea:	f7fb fb75 	bl	80001d8 <__aeabi_dsub>
 8004aee:	4632      	mov	r2, r6
 8004af0:	463b      	mov	r3, r7
 8004af2:	f7fb fd29 	bl	8000548 <__aeabi_dmul>
 8004af6:	a35c      	add	r3, pc, #368	@ (adr r3, 8004c68 <atan+0x2f0>)
 8004af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afc:	f7fb fb6c 	bl	80001d8 <__aeabi_dsub>
 8004b00:	4632      	mov	r2, r6
 8004b02:	463b      	mov	r3, r7
 8004b04:	f7fb fd20 	bl	8000548 <__aeabi_dmul>
 8004b08:	a359      	add	r3, pc, #356	@ (adr r3, 8004c70 <atan+0x2f8>)
 8004b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0e:	f7fb fb63 	bl	80001d8 <__aeabi_dsub>
 8004b12:	4632      	mov	r2, r6
 8004b14:	463b      	mov	r3, r7
 8004b16:	f7fb fd17 	bl	8000548 <__aeabi_dmul>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	4640      	mov	r0, r8
 8004b20:	4649      	mov	r1, r9
 8004b22:	f7fb fb5b 	bl	80001dc <__adddf3>
 8004b26:	4622      	mov	r2, r4
 8004b28:	462b      	mov	r3, r5
 8004b2a:	f7fb fd0d 	bl	8000548 <__aeabi_dmul>
 8004b2e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	d148      	bne.n	8004bca <atan+0x252>
 8004b38:	4620      	mov	r0, r4
 8004b3a:	4629      	mov	r1, r5
 8004b3c:	f7fb fb4c 	bl	80001d8 <__aeabi_dsub>
 8004b40:	e72f      	b.n	80049a2 <atan+0x2a>
 8004b42:	4b52      	ldr	r3, [pc, #328]	@ (8004c8c <atan+0x314>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	4620      	mov	r0, r4
 8004b48:	4629      	mov	r1, r5
 8004b4a:	f7fb fb45 	bl	80001d8 <__aeabi_dsub>
 8004b4e:	4b4f      	ldr	r3, [pc, #316]	@ (8004c8c <atan+0x314>)
 8004b50:	4606      	mov	r6, r0
 8004b52:	460f      	mov	r7, r1
 8004b54:	2200      	movs	r2, #0
 8004b56:	4620      	mov	r0, r4
 8004b58:	4629      	mov	r1, r5
 8004b5a:	f7fb fb3f 	bl	80001dc <__adddf3>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	4630      	mov	r0, r6
 8004b64:	4639      	mov	r1, r7
 8004b66:	f7fb fe19 	bl	800079c <__aeabi_ddiv>
 8004b6a:	f04f 0a01 	mov.w	sl, #1
 8004b6e:	4604      	mov	r4, r0
 8004b70:	460d      	mov	r5, r1
 8004b72:	e765      	b.n	8004a40 <atan+0xc8>
 8004b74:	4b47      	ldr	r3, [pc, #284]	@ (8004c94 <atan+0x31c>)
 8004b76:	429e      	cmp	r6, r3
 8004b78:	d21c      	bcs.n	8004bb4 <atan+0x23c>
 8004b7a:	4b47      	ldr	r3, [pc, #284]	@ (8004c98 <atan+0x320>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	4620      	mov	r0, r4
 8004b80:	4629      	mov	r1, r5
 8004b82:	f7fb fb29 	bl	80001d8 <__aeabi_dsub>
 8004b86:	4b44      	ldr	r3, [pc, #272]	@ (8004c98 <atan+0x320>)
 8004b88:	4606      	mov	r6, r0
 8004b8a:	460f      	mov	r7, r1
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	4620      	mov	r0, r4
 8004b90:	4629      	mov	r1, r5
 8004b92:	f7fb fcd9 	bl	8000548 <__aeabi_dmul>
 8004b96:	4b3d      	ldr	r3, [pc, #244]	@ (8004c8c <atan+0x314>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f7fb fb1f 	bl	80001dc <__adddf3>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	4630      	mov	r0, r6
 8004ba4:	4639      	mov	r1, r7
 8004ba6:	f7fb fdf9 	bl	800079c <__aeabi_ddiv>
 8004baa:	f04f 0a02 	mov.w	sl, #2
 8004bae:	4604      	mov	r4, r0
 8004bb0:	460d      	mov	r5, r1
 8004bb2:	e745      	b.n	8004a40 <atan+0xc8>
 8004bb4:	4622      	mov	r2, r4
 8004bb6:	462b      	mov	r3, r5
 8004bb8:	4938      	ldr	r1, [pc, #224]	@ (8004c9c <atan+0x324>)
 8004bba:	2000      	movs	r0, #0
 8004bbc:	f7fb fdee 	bl	800079c <__aeabi_ddiv>
 8004bc0:	f04f 0a03 	mov.w	sl, #3
 8004bc4:	4604      	mov	r4, r0
 8004bc6:	460d      	mov	r5, r1
 8004bc8:	e73a      	b.n	8004a40 <atan+0xc8>
 8004bca:	4b35      	ldr	r3, [pc, #212]	@ (8004ca0 <atan+0x328>)
 8004bcc:	4e35      	ldr	r6, [pc, #212]	@ (8004ca4 <atan+0x32c>)
 8004bce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd6:	f7fb faff 	bl	80001d8 <__aeabi_dsub>
 8004bda:	4622      	mov	r2, r4
 8004bdc:	462b      	mov	r3, r5
 8004bde:	f7fb fafb 	bl	80001d8 <__aeabi_dsub>
 8004be2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	e9d6 0100 	ldrd	r0, r1, [r6]
 8004bee:	f7fb faf3 	bl	80001d8 <__aeabi_dsub>
 8004bf2:	f1bb 0f00 	cmp.w	fp, #0
 8004bf6:	4604      	mov	r4, r0
 8004bf8:	460d      	mov	r5, r1
 8004bfa:	f6bf aedc 	bge.w	80049b6 <atan+0x3e>
 8004bfe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004c02:	461d      	mov	r5, r3
 8004c04:	e6d7      	b.n	80049b6 <atan+0x3e>
 8004c06:	a51c      	add	r5, pc, #112	@ (adr r5, 8004c78 <atan+0x300>)
 8004c08:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004c0c:	e6d3      	b.n	80049b6 <atan+0x3e>
 8004c0e:	bf00      	nop
 8004c10:	54442d18 	.word	0x54442d18
 8004c14:	3ff921fb 	.word	0x3ff921fb
 8004c18:	8800759c 	.word	0x8800759c
 8004c1c:	7e37e43c 	.word	0x7e37e43c
 8004c20:	e322da11 	.word	0xe322da11
 8004c24:	3f90ad3a 	.word	0x3f90ad3a
 8004c28:	24760deb 	.word	0x24760deb
 8004c2c:	3fa97b4b 	.word	0x3fa97b4b
 8004c30:	a0d03d51 	.word	0xa0d03d51
 8004c34:	3fb10d66 	.word	0x3fb10d66
 8004c38:	c54c206e 	.word	0xc54c206e
 8004c3c:	3fb745cd 	.word	0x3fb745cd
 8004c40:	920083ff 	.word	0x920083ff
 8004c44:	3fc24924 	.word	0x3fc24924
 8004c48:	5555550d 	.word	0x5555550d
 8004c4c:	3fd55555 	.word	0x3fd55555
 8004c50:	2c6a6c2f 	.word	0x2c6a6c2f
 8004c54:	bfa2b444 	.word	0xbfa2b444
 8004c58:	52defd9a 	.word	0x52defd9a
 8004c5c:	3fadde2d 	.word	0x3fadde2d
 8004c60:	af749a6d 	.word	0xaf749a6d
 8004c64:	3fb3b0f2 	.word	0x3fb3b0f2
 8004c68:	fe231671 	.word	0xfe231671
 8004c6c:	3fbc71c6 	.word	0x3fbc71c6
 8004c70:	9998ebc4 	.word	0x9998ebc4
 8004c74:	3fc99999 	.word	0x3fc99999
 8004c78:	54442d18 	.word	0x54442d18
 8004c7c:	bff921fb 	.word	0xbff921fb
 8004c80:	440fffff 	.word	0x440fffff
 8004c84:	7ff00000 	.word	0x7ff00000
 8004c88:	3fdbffff 	.word	0x3fdbffff
 8004c8c:	3ff00000 	.word	0x3ff00000
 8004c90:	3ff2ffff 	.word	0x3ff2ffff
 8004c94:	40038000 	.word	0x40038000
 8004c98:	3ff80000 	.word	0x3ff80000
 8004c9c:	bff00000 	.word	0xbff00000
 8004ca0:	08005060 	.word	0x08005060
 8004ca4:	08005080 	.word	0x08005080

08004ca8 <fabs>:
 8004ca8:	ec51 0b10 	vmov	r0, r1, d0
 8004cac:	4602      	mov	r2, r0
 8004cae:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004cb2:	ec43 2b10 	vmov	d0, r2, r3
 8004cb6:	4770      	bx	lr

08004cb8 <__ieee754_sqrt>:
 8004cb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cbc:	4a68      	ldr	r2, [pc, #416]	@ (8004e60 <__ieee754_sqrt+0x1a8>)
 8004cbe:	ec55 4b10 	vmov	r4, r5, d0
 8004cc2:	43aa      	bics	r2, r5
 8004cc4:	462b      	mov	r3, r5
 8004cc6:	4621      	mov	r1, r4
 8004cc8:	d110      	bne.n	8004cec <__ieee754_sqrt+0x34>
 8004cca:	4622      	mov	r2, r4
 8004ccc:	4620      	mov	r0, r4
 8004cce:	4629      	mov	r1, r5
 8004cd0:	f7fb fc3a 	bl	8000548 <__aeabi_dmul>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4620      	mov	r0, r4
 8004cda:	4629      	mov	r1, r5
 8004cdc:	f7fb fa7e 	bl	80001dc <__adddf3>
 8004ce0:	4604      	mov	r4, r0
 8004ce2:	460d      	mov	r5, r1
 8004ce4:	ec45 4b10 	vmov	d0, r4, r5
 8004ce8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cec:	2d00      	cmp	r5, #0
 8004cee:	dc0e      	bgt.n	8004d0e <__ieee754_sqrt+0x56>
 8004cf0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8004cf4:	4322      	orrs	r2, r4
 8004cf6:	d0f5      	beq.n	8004ce4 <__ieee754_sqrt+0x2c>
 8004cf8:	b19d      	cbz	r5, 8004d22 <__ieee754_sqrt+0x6a>
 8004cfa:	4622      	mov	r2, r4
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	4629      	mov	r1, r5
 8004d00:	f7fb fa6a 	bl	80001d8 <__aeabi_dsub>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	f7fb fd48 	bl	800079c <__aeabi_ddiv>
 8004d0c:	e7e8      	b.n	8004ce0 <__ieee754_sqrt+0x28>
 8004d0e:	152a      	asrs	r2, r5, #20
 8004d10:	d115      	bne.n	8004d3e <__ieee754_sqrt+0x86>
 8004d12:	2000      	movs	r0, #0
 8004d14:	e009      	b.n	8004d2a <__ieee754_sqrt+0x72>
 8004d16:	0acb      	lsrs	r3, r1, #11
 8004d18:	3a15      	subs	r2, #21
 8004d1a:	0549      	lsls	r1, r1, #21
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0fa      	beq.n	8004d16 <__ieee754_sqrt+0x5e>
 8004d20:	e7f7      	b.n	8004d12 <__ieee754_sqrt+0x5a>
 8004d22:	462a      	mov	r2, r5
 8004d24:	e7fa      	b.n	8004d1c <__ieee754_sqrt+0x64>
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	3001      	adds	r0, #1
 8004d2a:	02dc      	lsls	r4, r3, #11
 8004d2c:	d5fb      	bpl.n	8004d26 <__ieee754_sqrt+0x6e>
 8004d2e:	1e44      	subs	r4, r0, #1
 8004d30:	1b12      	subs	r2, r2, r4
 8004d32:	f1c0 0420 	rsb	r4, r0, #32
 8004d36:	fa21 f404 	lsr.w	r4, r1, r4
 8004d3a:	4323      	orrs	r3, r4
 8004d3c:	4081      	lsls	r1, r0
 8004d3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d42:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8004d46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d4a:	07d2      	lsls	r2, r2, #31
 8004d4c:	bf5c      	itt	pl
 8004d4e:	005b      	lslpl	r3, r3, #1
 8004d50:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8004d54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004d58:	bf58      	it	pl
 8004d5a:	0049      	lslpl	r1, r1, #1
 8004d5c:	2600      	movs	r6, #0
 8004d5e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8004d62:	106d      	asrs	r5, r5, #1
 8004d64:	0049      	lsls	r1, r1, #1
 8004d66:	2016      	movs	r0, #22
 8004d68:	4632      	mov	r2, r6
 8004d6a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8004d6e:	1917      	adds	r7, r2, r4
 8004d70:	429f      	cmp	r7, r3
 8004d72:	bfde      	ittt	le
 8004d74:	193a      	addle	r2, r7, r4
 8004d76:	1bdb      	suble	r3, r3, r7
 8004d78:	1936      	addle	r6, r6, r4
 8004d7a:	0fcf      	lsrs	r7, r1, #31
 8004d7c:	3801      	subs	r0, #1
 8004d7e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8004d82:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004d86:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8004d8a:	d1f0      	bne.n	8004d6e <__ieee754_sqrt+0xb6>
 8004d8c:	4604      	mov	r4, r0
 8004d8e:	2720      	movs	r7, #32
 8004d90:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8004d94:	429a      	cmp	r2, r3
 8004d96:	eb00 0e0c 	add.w	lr, r0, ip
 8004d9a:	db02      	blt.n	8004da2 <__ieee754_sqrt+0xea>
 8004d9c:	d113      	bne.n	8004dc6 <__ieee754_sqrt+0x10e>
 8004d9e:	458e      	cmp	lr, r1
 8004da0:	d811      	bhi.n	8004dc6 <__ieee754_sqrt+0x10e>
 8004da2:	f1be 0f00 	cmp.w	lr, #0
 8004da6:	eb0e 000c 	add.w	r0, lr, ip
 8004daa:	da42      	bge.n	8004e32 <__ieee754_sqrt+0x17a>
 8004dac:	2800      	cmp	r0, #0
 8004dae:	db40      	blt.n	8004e32 <__ieee754_sqrt+0x17a>
 8004db0:	f102 0801 	add.w	r8, r2, #1
 8004db4:	1a9b      	subs	r3, r3, r2
 8004db6:	458e      	cmp	lr, r1
 8004db8:	bf88      	it	hi
 8004dba:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004dbe:	eba1 010e 	sub.w	r1, r1, lr
 8004dc2:	4464      	add	r4, ip
 8004dc4:	4642      	mov	r2, r8
 8004dc6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8004dca:	3f01      	subs	r7, #1
 8004dcc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8004dd0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004dd4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004dd8:	d1dc      	bne.n	8004d94 <__ieee754_sqrt+0xdc>
 8004dda:	4319      	orrs	r1, r3
 8004ddc:	d01b      	beq.n	8004e16 <__ieee754_sqrt+0x15e>
 8004dde:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8004e64 <__ieee754_sqrt+0x1ac>
 8004de2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8004e68 <__ieee754_sqrt+0x1b0>
 8004de6:	e9da 0100 	ldrd	r0, r1, [sl]
 8004dea:	e9db 2300 	ldrd	r2, r3, [fp]
 8004dee:	f7fb f9f3 	bl	80001d8 <__aeabi_dsub>
 8004df2:	e9da 8900 	ldrd	r8, r9, [sl]
 8004df6:	4602      	mov	r2, r0
 8004df8:	460b      	mov	r3, r1
 8004dfa:	4640      	mov	r0, r8
 8004dfc:	4649      	mov	r1, r9
 8004dfe:	f7fb fe1f 	bl	8000a40 <__aeabi_dcmple>
 8004e02:	b140      	cbz	r0, 8004e16 <__ieee754_sqrt+0x15e>
 8004e04:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004e08:	e9da 0100 	ldrd	r0, r1, [sl]
 8004e0c:	e9db 2300 	ldrd	r2, r3, [fp]
 8004e10:	d111      	bne.n	8004e36 <__ieee754_sqrt+0x17e>
 8004e12:	3601      	adds	r6, #1
 8004e14:	463c      	mov	r4, r7
 8004e16:	1072      	asrs	r2, r6, #1
 8004e18:	0863      	lsrs	r3, r4, #1
 8004e1a:	07f1      	lsls	r1, r6, #31
 8004e1c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8004e20:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8004e24:	bf48      	it	mi
 8004e26:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8004e2a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8004e2e:	4618      	mov	r0, r3
 8004e30:	e756      	b.n	8004ce0 <__ieee754_sqrt+0x28>
 8004e32:	4690      	mov	r8, r2
 8004e34:	e7be      	b.n	8004db4 <__ieee754_sqrt+0xfc>
 8004e36:	f7fb f9d1 	bl	80001dc <__adddf3>
 8004e3a:	e9da 8900 	ldrd	r8, r9, [sl]
 8004e3e:	4602      	mov	r2, r0
 8004e40:	460b      	mov	r3, r1
 8004e42:	4640      	mov	r0, r8
 8004e44:	4649      	mov	r1, r9
 8004e46:	f7fb fdf1 	bl	8000a2c <__aeabi_dcmplt>
 8004e4a:	b120      	cbz	r0, 8004e56 <__ieee754_sqrt+0x19e>
 8004e4c:	1ca0      	adds	r0, r4, #2
 8004e4e:	bf08      	it	eq
 8004e50:	3601      	addeq	r6, #1
 8004e52:	3402      	adds	r4, #2
 8004e54:	e7df      	b.n	8004e16 <__ieee754_sqrt+0x15e>
 8004e56:	1c63      	adds	r3, r4, #1
 8004e58:	f023 0401 	bic.w	r4, r3, #1
 8004e5c:	e7db      	b.n	8004e16 <__ieee754_sqrt+0x15e>
 8004e5e:	bf00      	nop
 8004e60:	7ff00000 	.word	0x7ff00000
 8004e64:	200000f8 	.word	0x200000f8
 8004e68:	200000f0 	.word	0x200000f0
 8004e6c:	00000000 	.word	0x00000000

08004e70 <__ieee754_atan2>:
 8004e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e74:	ec57 6b11 	vmov	r6, r7, d1
 8004e78:	4273      	negs	r3, r6
 8004e7a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8004ff8 <__ieee754_atan2+0x188>
 8004e7e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8004e82:	4333      	orrs	r3, r6
 8004e84:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8004e88:	4543      	cmp	r3, r8
 8004e8a:	ec51 0b10 	vmov	r0, r1, d0
 8004e8e:	4635      	mov	r5, r6
 8004e90:	d809      	bhi.n	8004ea6 <__ieee754_atan2+0x36>
 8004e92:	4244      	negs	r4, r0
 8004e94:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004e98:	4304      	orrs	r4, r0
 8004e9a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8004e9e:	4544      	cmp	r4, r8
 8004ea0:	468e      	mov	lr, r1
 8004ea2:	4681      	mov	r9, r0
 8004ea4:	d907      	bls.n	8004eb6 <__ieee754_atan2+0x46>
 8004ea6:	4632      	mov	r2, r6
 8004ea8:	463b      	mov	r3, r7
 8004eaa:	f7fb f997 	bl	80001dc <__adddf3>
 8004eae:	ec41 0b10 	vmov	d0, r0, r1
 8004eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eb6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8004eba:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8004ebe:	4334      	orrs	r4, r6
 8004ec0:	d103      	bne.n	8004eca <__ieee754_atan2+0x5a>
 8004ec2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ec6:	f7ff bd57 	b.w	8004978 <atan>
 8004eca:	17bc      	asrs	r4, r7, #30
 8004ecc:	f004 0402 	and.w	r4, r4, #2
 8004ed0:	ea53 0909 	orrs.w	r9, r3, r9
 8004ed4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8004ed8:	d107      	bne.n	8004eea <__ieee754_atan2+0x7a>
 8004eda:	2c02      	cmp	r4, #2
 8004edc:	d05f      	beq.n	8004f9e <__ieee754_atan2+0x12e>
 8004ede:	2c03      	cmp	r4, #3
 8004ee0:	d1e5      	bne.n	8004eae <__ieee754_atan2+0x3e>
 8004ee2:	a141      	add	r1, pc, #260	@ (adr r1, 8004fe8 <__ieee754_atan2+0x178>)
 8004ee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ee8:	e7e1      	b.n	8004eae <__ieee754_atan2+0x3e>
 8004eea:	4315      	orrs	r5, r2
 8004eec:	d106      	bne.n	8004efc <__ieee754_atan2+0x8c>
 8004eee:	f1be 0f00 	cmp.w	lr, #0
 8004ef2:	da5f      	bge.n	8004fb4 <__ieee754_atan2+0x144>
 8004ef4:	a13e      	add	r1, pc, #248	@ (adr r1, 8004ff0 <__ieee754_atan2+0x180>)
 8004ef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004efa:	e7d8      	b.n	8004eae <__ieee754_atan2+0x3e>
 8004efc:	4542      	cmp	r2, r8
 8004efe:	d10f      	bne.n	8004f20 <__ieee754_atan2+0xb0>
 8004f00:	4293      	cmp	r3, r2
 8004f02:	f104 34ff 	add.w	r4, r4, #4294967295
 8004f06:	d107      	bne.n	8004f18 <__ieee754_atan2+0xa8>
 8004f08:	2c02      	cmp	r4, #2
 8004f0a:	d84c      	bhi.n	8004fa6 <__ieee754_atan2+0x136>
 8004f0c:	4b34      	ldr	r3, [pc, #208]	@ (8004fe0 <__ieee754_atan2+0x170>)
 8004f0e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004f12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f16:	e7ca      	b.n	8004eae <__ieee754_atan2+0x3e>
 8004f18:	2c02      	cmp	r4, #2
 8004f1a:	d848      	bhi.n	8004fae <__ieee754_atan2+0x13e>
 8004f1c:	4b31      	ldr	r3, [pc, #196]	@ (8004fe4 <__ieee754_atan2+0x174>)
 8004f1e:	e7f6      	b.n	8004f0e <__ieee754_atan2+0x9e>
 8004f20:	4543      	cmp	r3, r8
 8004f22:	d0e4      	beq.n	8004eee <__ieee754_atan2+0x7e>
 8004f24:	1a9b      	subs	r3, r3, r2
 8004f26:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8004f2a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004f2e:	da1e      	bge.n	8004f6e <__ieee754_atan2+0xfe>
 8004f30:	2f00      	cmp	r7, #0
 8004f32:	da01      	bge.n	8004f38 <__ieee754_atan2+0xc8>
 8004f34:	323c      	adds	r2, #60	@ 0x3c
 8004f36:	db1e      	blt.n	8004f76 <__ieee754_atan2+0x106>
 8004f38:	4632      	mov	r2, r6
 8004f3a:	463b      	mov	r3, r7
 8004f3c:	f7fb fc2e 	bl	800079c <__aeabi_ddiv>
 8004f40:	ec41 0b10 	vmov	d0, r0, r1
 8004f44:	f7ff feb0 	bl	8004ca8 <fabs>
 8004f48:	f7ff fd16 	bl	8004978 <atan>
 8004f4c:	ec51 0b10 	vmov	r0, r1, d0
 8004f50:	2c01      	cmp	r4, #1
 8004f52:	d013      	beq.n	8004f7c <__ieee754_atan2+0x10c>
 8004f54:	2c02      	cmp	r4, #2
 8004f56:	d015      	beq.n	8004f84 <__ieee754_atan2+0x114>
 8004f58:	2c00      	cmp	r4, #0
 8004f5a:	d0a8      	beq.n	8004eae <__ieee754_atan2+0x3e>
 8004f5c:	a318      	add	r3, pc, #96	@ (adr r3, 8004fc0 <__ieee754_atan2+0x150>)
 8004f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f62:	f7fb f939 	bl	80001d8 <__aeabi_dsub>
 8004f66:	a318      	add	r3, pc, #96	@ (adr r3, 8004fc8 <__ieee754_atan2+0x158>)
 8004f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6c:	e014      	b.n	8004f98 <__ieee754_atan2+0x128>
 8004f6e:	a118      	add	r1, pc, #96	@ (adr r1, 8004fd0 <__ieee754_atan2+0x160>)
 8004f70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f74:	e7ec      	b.n	8004f50 <__ieee754_atan2+0xe0>
 8004f76:	2000      	movs	r0, #0
 8004f78:	2100      	movs	r1, #0
 8004f7a:	e7e9      	b.n	8004f50 <__ieee754_atan2+0xe0>
 8004f7c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004f80:	4619      	mov	r1, r3
 8004f82:	e794      	b.n	8004eae <__ieee754_atan2+0x3e>
 8004f84:	a30e      	add	r3, pc, #56	@ (adr r3, 8004fc0 <__ieee754_atan2+0x150>)
 8004f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8a:	f7fb f925 	bl	80001d8 <__aeabi_dsub>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	a10d      	add	r1, pc, #52	@ (adr r1, 8004fc8 <__ieee754_atan2+0x158>)
 8004f94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f98:	f7fb f91e 	bl	80001d8 <__aeabi_dsub>
 8004f9c:	e787      	b.n	8004eae <__ieee754_atan2+0x3e>
 8004f9e:	a10a      	add	r1, pc, #40	@ (adr r1, 8004fc8 <__ieee754_atan2+0x158>)
 8004fa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fa4:	e783      	b.n	8004eae <__ieee754_atan2+0x3e>
 8004fa6:	a10c      	add	r1, pc, #48	@ (adr r1, 8004fd8 <__ieee754_atan2+0x168>)
 8004fa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fac:	e77f      	b.n	8004eae <__ieee754_atan2+0x3e>
 8004fae:	2000      	movs	r0, #0
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	e77c      	b.n	8004eae <__ieee754_atan2+0x3e>
 8004fb4:	a106      	add	r1, pc, #24	@ (adr r1, 8004fd0 <__ieee754_atan2+0x160>)
 8004fb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fba:	e778      	b.n	8004eae <__ieee754_atan2+0x3e>
 8004fbc:	f3af 8000 	nop.w
 8004fc0:	33145c07 	.word	0x33145c07
 8004fc4:	3ca1a626 	.word	0x3ca1a626
 8004fc8:	54442d18 	.word	0x54442d18
 8004fcc:	400921fb 	.word	0x400921fb
 8004fd0:	54442d18 	.word	0x54442d18
 8004fd4:	3ff921fb 	.word	0x3ff921fb
 8004fd8:	54442d18 	.word	0x54442d18
 8004fdc:	3fe921fb 	.word	0x3fe921fb
 8004fe0:	080050b8 	.word	0x080050b8
 8004fe4:	080050a0 	.word	0x080050a0
 8004fe8:	54442d18 	.word	0x54442d18
 8004fec:	c00921fb 	.word	0xc00921fb
 8004ff0:	54442d18 	.word	0x54442d18
 8004ff4:	bff921fb 	.word	0xbff921fb
 8004ff8:	7ff00000 	.word	0x7ff00000

08004ffc <_init>:
 8004ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffe:	bf00      	nop
 8005000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005002:	bc08      	pop	{r3}
 8005004:	469e      	mov	lr, r3
 8005006:	4770      	bx	lr

08005008 <_fini>:
 8005008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500a:	bf00      	nop
 800500c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800500e:	bc08      	pop	{r3}
 8005010:	469e      	mov	lr, r3
 8005012:	4770      	bx	lr
